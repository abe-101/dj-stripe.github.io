{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is dj-stripe? Dj-stripe is an extensible wrapper around the Stripe API that continuously syncs most of the Stripe Data to your local database as pre-implemented Django Models, out of the box! This allows you to use the Django ORM, in your code, to work with the data making it easier and faster! For example, if you need to interact with a customer subscription, you can use dj-stripe\u2019s Subscription Model , in your code, to get the subscription data for that customer as well as the related models\u2019 data too (if need be and potentially in 1 database query! ) instead of making multiple slower and unreliable consecutive network calls only to parse through 1 or more of Stripe\u2019s JSON like objects! Features Simplified Security : We make it simple for you to collect sensitive data such as credit card numbers and remain PCI compliant. This means the sensitive data is sent directly to Stripe instead of passing through your server. For more information, see our Integration Security Guide. Wallets : We support all Stripe supported wallets including but not limited to Apple Pay and Google Pay. Payment methods : Accepting more payment methods helps your business expand its global reach and improve checkout conversion. SCA-Ready : The SDK automatically performs native 3D Secure authentication if needed to comply with Strong Customer Authentication regulation in Europe and other countries as mandated by the law. Support for multiple accounts and API keys \u2192 May be done by the time this website is ready Tested with Stripe API 2020-08-27 (see API versions) We support the following Stripe functionalities: Stripe Core Payment Methods Product Checkout Billing Connect Sigma Tutorials The dj-stripe community has come up with some great tutorials: Videos -- Blogs How to Create a Subscription SaaS Application with Django and Stripe - Sep 2021 - Django 3.2 - dj-stripe 2.4.3 Using Django and Stripe for Monthly Subscriptions - May 4, 2021 Uses Stripe Elements Django Stripe Integration with using dj-stripe - Jun 12, 2020 Have a blog, video or online publication? Write about your dj-stripe tips and tricks, then send us a pull request with the link. Who uses dj-stripe?","title":"Home"},{"location":"#what-is-dj-stripe","text":"Dj-stripe is an extensible wrapper around the Stripe API that continuously syncs most of the Stripe Data to your local database as pre-implemented Django Models, out of the box! This allows you to use the Django ORM, in your code, to work with the data making it easier and faster! For example, if you need to interact with a customer subscription, you can use dj-stripe\u2019s Subscription Model , in your code, to get the subscription data for that customer as well as the related models\u2019 data too (if need be and potentially in 1 database query! ) instead of making multiple slower and unreliable consecutive network calls only to parse through 1 or more of Stripe\u2019s JSON like objects!","title":"What is dj-stripe?"},{"location":"#features","text":"Simplified Security : We make it simple for you to collect sensitive data such as credit card numbers and remain PCI compliant. This means the sensitive data is sent directly to Stripe instead of passing through your server. For more information, see our Integration Security Guide. Wallets : We support all Stripe supported wallets including but not limited to Apple Pay and Google Pay. Payment methods : Accepting more payment methods helps your business expand its global reach and improve checkout conversion. SCA-Ready : The SDK automatically performs native 3D Secure authentication if needed to comply with Strong Customer Authentication regulation in Europe and other countries as mandated by the law. Support for multiple accounts and API keys \u2192 May be done by the time this website is ready Tested with Stripe API 2020-08-27 (see API versions) We support the following Stripe functionalities: Stripe Core Payment Methods Product Checkout Billing Connect Sigma","title":"Features"},{"location":"#tutorials","text":"The dj-stripe community has come up with some great tutorials:","title":"Tutorials"},{"location":"#videos","text":"--","title":"Videos"},{"location":"#blogs","text":"How to Create a Subscription SaaS Application with Django and Stripe - Sep 2021 - Django 3.2 - dj-stripe 2.4.3 Using Django and Stripe for Monthly Subscriptions - May 4, 2021 Uses Stripe Elements Django Stripe Integration with using dj-stripe - Jun 12, 2020 Have a blog, video or online publication? Write about your dj-stripe tips and tricks, then send us a pull request with the link.","title":"Blogs"},{"location":"#who-uses-dj-stripe","text":"","title":"Who uses dj-stripe?"},{"location":"CONTRIBUTING/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/dj-stripe/dj-stripe/issues . If you are reporting a bug, please include: The version of python and Django you're running Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it. Write Documentation dj-stripe could always use more documentation, whether as part of the official dj-stripe docs, in docstrings, or even on the web in blog posts, articles, and such. To see the project's documentation live, run the following command: mkdocs serve The documentation site will then be served on http://127.0.0.1:8000 . In case of any installation error In case you get the error that some plugin is not installed, please run: poetry install -E docs If you wish to just generate the documentation, you can replace serve with build , and the docs will be generated into the site/ folder. Submit Feedback The best way to send feedback is to file an issue at https://github.com/dj-stripe/dj-stripe/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Contributor Discussion For questions regarding contributions to dj-stripe, another avenue is our Discord channel at https://discord.gg/UJY8fcc . Get Started! Ready to contribute? Here's how to set up local development. Fork dj-stripe on Github . Clone your fork locally: $ git clone git@github.com:your_name_here/dj-stripe.git Set up pre-commit : $ git init # A git repo is required to install pre-commit $ pre-commit install Set up your test database. If you're running tests using PostgreSQL: $ createdb djstripe or if you want to test vs sqlite (for convenience) or MySQL, they can be selected by setting this environment variable: $ export DJSTRIPE_TEST_DB_VENDOR = sqlite # or: export DJSTRIPE_TEST_DB_VENDOR=mysql For postgres and mysql, the database host,port,username and password can be set with environment variables, see tests/settings.py Install Poetry if you do not have it already. You can set up a virtual environment with: $ poetry install You can then, at any time, open a shell into that environment with: $ poetry shell When you're done making changes, check that your changes pass the tests. A quick test run can be done as follows: $ DJSTRIPE_TEST_DB_VENDOR = sqlite pytest --reuse-db You should also check that the tests pass with other python and Django versions with tox. pytest will output both command line and html coverage statistics and will warn you if your changes caused code coverage to drop.: $ pip install tox $ tox If your changes altered the models you may need to generate Django migrations: $ DJSTRIPE_TEST_DB_VENDOR = sqlite poetry run ./manage.py makemigrations Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push Submit a pull request through the GitHub website. Congratulations, you're now a dj-stripe contributor! Have some \u2665 from us. Preferred Django Model Field Types When mapping from Stripe API field types to Django model fields, we try to follow Django best practises where practical. The following types should be preferred for fields that map to the Stripe API (which is almost all fields in our models). Strings Stripe API string fields have a default maximum length of 5,000 characters . In some cases a maximum length ( maxLength ) is specified in the Stripe OpenAPI schema . We follow Django's recommendation and avoid using null on string fields (which means we store \"\" for string fields that are null in stripe). Note that is enforced in the sync logic in StripeModel._stripe_object_to_record . For long string fields (eg above 255 characters) we prefer TextField over Charfield . Therefore the default type for string fields that don't have a maxLength specified in the Stripe OpenAPI schema should usually be: str_field = TextField(max_length=5000, default=\", blank=True, help_text=\"...\") Enumerations Fields that have a defined set of values can be implemented using StripeEnumField . Hash (dictionaries) Use the JSONField in djstripe.fields , see also the DJSTRIPE_USE_NATIVE_JSONFIELD setting. Currency amounts Stripe handles all currency amounts as integer cents, we currently have a mixture of fields as integer cents and decimal (eg dollar, euro etc) values, but we are aiming to standardise on cents (see https://github.com/dj-stripe/dj-stripe/issues/955 ). All new currency amount fields should use StripeQuantumCurrencyAmountField . Dates and Datetimes The Stripe API uses an integer timestamp (seconds since the Unix epoch) for dates and datetimes. We store this as a datetime field, using StripeDateTimeField . Django Migration Policy Migrations are considered a breaking change, so it's not usually not acceptable to add a migration to a stable branch, it will be a new MAJOR.MINOR.0 release. A workaround to this in the case that the Stripe API data isn't compatible with out model (eg Stripe is sending null to a non-null field) is to implement the _manipulate_stripe_object_hook classmethod on the model. Avoid new migrations with non-schema changes If a code change produces a migration that doesn't alter the database schema (eg changing help_text ) then instead of adding a new migration you can edit the most recent migration that affects the field in question. e.g.: https://github.com/dj-stripe/dj-stripe/commit/e2762c38918a90f00c42ecf21187a920bd3a2087 Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. The pull request must not drop code coverage below the current level. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring. If the pull request makes changes to a model, include Django migrations. The pull request should work for Python 3.6+. Check Github Actions and make sure that the tests pass for all supported Python versions. Code formatting: Make sure to install pre-commit to automatically run it on staged files or run manually with pre-commit run --all-files at the dj-stripe root to keep a consistent style.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"CONTRIBUTING/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"CONTRIBUTING/#report-bugs","text":"Report bugs at https://github.com/dj-stripe/dj-stripe/issues . If you are reporting a bug, please include: The version of python and Django you're running Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"CONTRIBUTING/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"CONTRIBUTING/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"CONTRIBUTING/#write-documentation","text":"dj-stripe could always use more documentation, whether as part of the official dj-stripe docs, in docstrings, or even on the web in blog posts, articles, and such. To see the project's documentation live, run the following command: mkdocs serve The documentation site will then be served on http://127.0.0.1:8000 . In case of any installation error In case you get the error that some plugin is not installed, please run: poetry install -E docs If you wish to just generate the documentation, you can replace serve with build , and the docs will be generated into the site/ folder.","title":"Write Documentation"},{"location":"CONTRIBUTING/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/dj-stripe/dj-stripe/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"CONTRIBUTING/#contributor-discussion","text":"For questions regarding contributions to dj-stripe, another avenue is our Discord channel at https://discord.gg/UJY8fcc .","title":"Contributor Discussion"},{"location":"CONTRIBUTING/#get-started","text":"Ready to contribute? Here's how to set up local development. Fork dj-stripe on Github . Clone your fork locally: $ git clone git@github.com:your_name_here/dj-stripe.git Set up pre-commit : $ git init # A git repo is required to install pre-commit $ pre-commit install Set up your test database. If you're running tests using PostgreSQL: $ createdb djstripe or if you want to test vs sqlite (for convenience) or MySQL, they can be selected by setting this environment variable: $ export DJSTRIPE_TEST_DB_VENDOR = sqlite # or: export DJSTRIPE_TEST_DB_VENDOR=mysql For postgres and mysql, the database host,port,username and password can be set with environment variables, see tests/settings.py Install Poetry if you do not have it already. You can set up a virtual environment with: $ poetry install You can then, at any time, open a shell into that environment with: $ poetry shell When you're done making changes, check that your changes pass the tests. A quick test run can be done as follows: $ DJSTRIPE_TEST_DB_VENDOR = sqlite pytest --reuse-db You should also check that the tests pass with other python and Django versions with tox. pytest will output both command line and html coverage statistics and will warn you if your changes caused code coverage to drop.: $ pip install tox $ tox If your changes altered the models you may need to generate Django migrations: $ DJSTRIPE_TEST_DB_VENDOR = sqlite poetry run ./manage.py makemigrations Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push Submit a pull request through the GitHub website. Congratulations, you're now a dj-stripe contributor! Have some \u2665 from us.","title":"Get Started!"},{"location":"CONTRIBUTING/#preferred-django-model-field-types","text":"When mapping from Stripe API field types to Django model fields, we try to follow Django best practises where practical. The following types should be preferred for fields that map to the Stripe API (which is almost all fields in our models).","title":"Preferred Django Model Field Types"},{"location":"CONTRIBUTING/#strings","text":"Stripe API string fields have a default maximum length of 5,000 characters . In some cases a maximum length ( maxLength ) is specified in the Stripe OpenAPI schema . We follow Django's recommendation and avoid using null on string fields (which means we store \"\" for string fields that are null in stripe). Note that is enforced in the sync logic in StripeModel._stripe_object_to_record . For long string fields (eg above 255 characters) we prefer TextField over Charfield . Therefore the default type for string fields that don't have a maxLength specified in the Stripe OpenAPI schema should usually be: str_field = TextField(max_length=5000, default=\", blank=True, help_text=\"...\")","title":"Strings"},{"location":"CONTRIBUTING/#enumerations","text":"Fields that have a defined set of values can be implemented using StripeEnumField .","title":"Enumerations"},{"location":"CONTRIBUTING/#hash-dictionaries","text":"Use the JSONField in djstripe.fields , see also the DJSTRIPE_USE_NATIVE_JSONFIELD setting.","title":"Hash (dictionaries)"},{"location":"CONTRIBUTING/#currency-amounts","text":"Stripe handles all currency amounts as integer cents, we currently have a mixture of fields as integer cents and decimal (eg dollar, euro etc) values, but we are aiming to standardise on cents (see https://github.com/dj-stripe/dj-stripe/issues/955 ). All new currency amount fields should use StripeQuantumCurrencyAmountField .","title":"Currency amounts"},{"location":"CONTRIBUTING/#dates-and-datetimes","text":"The Stripe API uses an integer timestamp (seconds since the Unix epoch) for dates and datetimes. We store this as a datetime field, using StripeDateTimeField .","title":"Dates and Datetimes"},{"location":"CONTRIBUTING/#django-migration-policy","text":"Migrations are considered a breaking change, so it's not usually not acceptable to add a migration to a stable branch, it will be a new MAJOR.MINOR.0 release. A workaround to this in the case that the Stripe API data isn't compatible with out model (eg Stripe is sending null to a non-null field) is to implement the _manipulate_stripe_object_hook classmethod on the model.","title":"Django Migration Policy"},{"location":"CONTRIBUTING/#avoid-new-migrations-with-non-schema-changes","text":"If a code change produces a migration that doesn't alter the database schema (eg changing help_text ) then instead of adding a new migration you can edit the most recent migration that affects the field in question. e.g.: https://github.com/dj-stripe/dj-stripe/commit/e2762c38918a90f00c42ecf21187a920bd3a2087","title":"Avoid new migrations with non-schema changes"},{"location":"CONTRIBUTING/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. The pull request must not drop code coverage below the current level. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring. If the pull request makes changes to a model, include Django migrations. The pull request should work for Python 3.6+. Check Github Actions and make sure that the tests pass for all supported Python versions. Code formatting: Make sure to install pre-commit to automatically run it on staged files or run manually with pre-commit run --all-files at the dj-stripe root to keep a consistent style.","title":"Pull Request Guidelines"},{"location":"api_keys/","text":"Managing Stripe API keys Stripe API keys are stored in the database, and editable from the Django admin. Important Note By default, keys are visible by anyone who has access to the dj-stripe administration. Adding new API keys You may add new API keys via the Dj-Stripe \"API key\" administration. The only required value is the key's \"secret\" value itself. Example: Once saved, Dj-Stripe will automatically detect whether the key is a public, restricted or secret key, and whether it's for live or test mode. If it's a secret key, the matching Account object will automatically be fetched as well and the key will be associated with it, so that it can be used to communicate with the Stripe API when dealing with objects belonging to that Account. Updating the API keys When expiring or rolling new secret keys, you should create the new API key in Stripe, then add it from the Django administration. Whenever you are ready, you may delete the old key. (It is safe to keep it around, as long as it hasn't expired. Keeping expired keys in the database may result in errors during usage). FAQ Why store them in the database? As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway. Isn't that insecure? Please do keep your billing database encrypted. There's a copy of all your customers' billing data on it! You may also instead create a read-only restricted key with all-read permissions for dj-stripe. There is no added risk there, given that dj-stripe holds a copy of all your data regardless. I'm using environment variables. Do I need to change anything? Not at this time. The settings STRIPE_LIVE_SECRET_KEY and STRIPE_TEST_SECRET_KEY can still be used. Their values will however be automatically saved to the database at the earliest opportunity. What about public keys? Setting STRIPE_LIVE_PUBLIC_KEY and STRIPE_TEST_PUBLIC_KEY will be deprecated in 2.5.0. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in pk_test_ and pk_live_ will be detected as publishable keys).","title":"Managing Stripe API Keys"},{"location":"api_keys/#managing-stripe-api-keys","text":"Stripe API keys are stored in the database, and editable from the Django admin. Important Note By default, keys are visible by anyone who has access to the dj-stripe administration.","title":"Managing Stripe API keys"},{"location":"api_keys/#adding-new-api-keys","text":"You may add new API keys via the Dj-Stripe \"API key\" administration. The only required value is the key's \"secret\" value itself. Example: Once saved, Dj-Stripe will automatically detect whether the key is a public, restricted or secret key, and whether it's for live or test mode. If it's a secret key, the matching Account object will automatically be fetched as well and the key will be associated with it, so that it can be used to communicate with the Stripe API when dealing with objects belonging to that Account.","title":"Adding new API keys"},{"location":"api_keys/#updating-the-api-keys","text":"When expiring or rolling new secret keys, you should create the new API key in Stripe, then add it from the Django administration. Whenever you are ready, you may delete the old key. (It is safe to keep it around, as long as it hasn't expired. Keeping expired keys in the database may result in errors during usage).","title":"Updating the API keys"},{"location":"api_keys/#faq","text":"","title":"FAQ"},{"location":"api_keys/#why-store-them-in-the-database","text":"As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway.","title":"Why store them in the database?"},{"location":"api_keys/#isnt-that-insecure","text":"Please do keep your billing database encrypted. There's a copy of all your customers' billing data on it! You may also instead create a read-only restricted key with all-read permissions for dj-stripe. There is no added risk there, given that dj-stripe holds a copy of all your data regardless.","title":"Isn't that insecure?"},{"location":"api_keys/#im-using-environment-variables-do-i-need-to-change-anything","text":"Not at this time. The settings STRIPE_LIVE_SECRET_KEY and STRIPE_TEST_SECRET_KEY can still be used. Their values will however be automatically saved to the database at the earliest opportunity.","title":"I'm using environment variables. Do I need to change anything?"},{"location":"api_keys/#what-about-public-keys","text":"Setting STRIPE_LIVE_PUBLIC_KEY and STRIPE_TEST_PUBLIC_KEY will be deprecated in 2.5.0. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in pk_test_ and pk_live_ will be detected as publishable keys).","title":"What about public keys?"},{"location":"api_versions/","text":"A note on Stripe API versions A point that can cause confusion to new users of dj-stripe is that there are several different Stripe API versions in play at once. Attention Don't touch the STRIPE_API_VERSION setting, but don't worry, it doesn't need to match your Stripe account api version. See also Stripe API Versioning Your Stripe account's API version You can find this on your Stripe dashboard labelled \" default \" For new accounts this will be the latest Stripe version. When upgrading version Stripe only allows you to upgrade to the latest version. Tip Checkout Stripe Version Upgrade Documentation for Upgrading Stripe API version Note This is the version used by Stripe when sending webhook data to you (though during webhook processing, dj-stripe re-fetches the data with its preferred version). It's also the default version used by the Stripe API, but dj-stripe overrides the API version when talking to stripe (this override is triggered on import of djstripe.models ). As a result your Stripe account API version is mostly irrelevant, though from time to time we will increase the minimum supported API version, and it's good practise to regularly upgrade to the latest version with appropriate testing. Stripe's current latest API version You can find this on your Stripe dashboard labelled \" latest \" or in [Stripe's API documentation] (https://stripe.com/docs/upgrades#api-changelog) This is the version used by new accounts and it's also \" true \" internal version of Stripe's API Tip Checkout Stripe API Versioning Dj-stripe API version This is the Stripe API version used by dj-stripe in all communication with Stripe, including when processing webhooks (though webhook data is sent to you by Stripe with your API version, we re-fetch the data with dj-stripe's API version), this is because the API schema needs to match dj-stripe's Django model schema. This is defined by djstripe.settings.djstripe_settings.DEFAULT_STRIPE_API_VERSION and can be overridden by the function, djstripe.settings.djstripe_settings.set_stripe_api_version , though see the warning about doing this. Dj-stripe Latest Tested Version This is the most recent Stripe account API version used by the maintainers during testing, more recent versions account versions are probably fine though.","title":"A note on Stripe API Versions"},{"location":"api_versions/#a-note-on-stripe-api-versions","text":"A point that can cause confusion to new users of dj-stripe is that there are several different Stripe API versions in play at once. Attention Don't touch the STRIPE_API_VERSION setting, but don't worry, it doesn't need to match your Stripe account api version. See also Stripe API Versioning","title":"A note on Stripe API versions"},{"location":"api_versions/#your-stripe-accounts-api-version","text":"You can find this on your Stripe dashboard labelled \" default \" For new accounts this will be the latest Stripe version. When upgrading version Stripe only allows you to upgrade to the latest version. Tip Checkout Stripe Version Upgrade Documentation for Upgrading Stripe API version Note This is the version used by Stripe when sending webhook data to you (though during webhook processing, dj-stripe re-fetches the data with its preferred version). It's also the default version used by the Stripe API, but dj-stripe overrides the API version when talking to stripe (this override is triggered on import of djstripe.models ). As a result your Stripe account API version is mostly irrelevant, though from time to time we will increase the minimum supported API version, and it's good practise to regularly upgrade to the latest version with appropriate testing.","title":"Your Stripe account's API version"},{"location":"api_versions/#stripes-current-latest-api-version","text":"You can find this on your Stripe dashboard labelled \" latest \" or in [Stripe's API documentation] (https://stripe.com/docs/upgrades#api-changelog) This is the version used by new accounts and it's also \" true \" internal version of Stripe's API Tip Checkout Stripe API Versioning","title":"Stripe's current latest API version"},{"location":"api_versions/#dj-stripe-api-version","text":"This is the Stripe API version used by dj-stripe in all communication with Stripe, including when processing webhooks (though webhook data is sent to you by Stripe with your API version, we re-fetch the data with dj-stripe's API version), this is because the API schema needs to match dj-stripe's Django model schema. This is defined by djstripe.settings.djstripe_settings.DEFAULT_STRIPE_API_VERSION and can be overridden by the function, djstripe.settings.djstripe_settings.set_stripe_api_version , though see the warning about doing this.","title":"Dj-stripe API version"},{"location":"api_versions/#dj-stripe-latest-tested-version","text":"This is the most recent Stripe account API version used by the maintainers during testing, more recent versions account versions are probably fine though.","title":"Dj-stripe Latest Tested Version"},{"location":"installation/","text":"Installation Get the distribution Install dj-stripe with pip: pip install dj-stripe Or with Poetry (recommended): poetry add dj-stripe Configuration Add djstripe to your INSTALLED_APPS : INSTALLED_APPS =( ... \"djstripe\" , ... ) Add to urls.py: path ( \"stripe/\" , include ( \"djstripe.urls\" , namespace = \"djstripe\" )) , Tell Stripe about the webhook (Stripe webhook docs can be found here ) using the full URL of your endpoint from the urls.py step above (e.g. https://example.com/stripe/webhook ). Add your Stripe keys and set the operating mode: STRIPE_LIVE_SECRET_KEY = os.environ.get ( \"STRIPE_LIVE_SECRET_KEY\" , \"<your secret key>\" ) STRIPE_TEST_SECRET_KEY = os.environ.get ( \"STRIPE_TEST_SECRET_KEY\" , \"<your secret key>\" ) STRIPE_LIVE_MODE = False # Change to True in production DJSTRIPE_WEBHOOK_SECRET = \"whsec_xxx\" # Get it from the section in the Stripe dashboard where you added the webhook endpoint DJSTRIPE_USE_NATIVE_JSONFIELD = True # We recommend setting to True for new installations DJSTRIPE_FOREIGN_KEY_TO_FIELD = \"id\" Note djstripe expects STRIPE_LIVE_MODE to be a Boolean Type. In case you use Bash env vars or equivalent to inject its value, make sure to convert it to a Boolean type. We highly recommended the library django-environ Add some payment plans via the Stripe.com dashboard. Run the commands: python manage.py migrate python manage.py djstripe_sync_models See here for notes about usage of the Stripe Elements frontend JS library. Running Tests Assuming the tests are run against PostgreSQL: createdb djstripe pip install tox tox","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#get-the-distribution","text":"Install dj-stripe with pip: pip install dj-stripe Or with Poetry (recommended): poetry add dj-stripe","title":"Get the distribution"},{"location":"installation/#configuration","text":"Add djstripe to your INSTALLED_APPS : INSTALLED_APPS =( ... \"djstripe\" , ... ) Add to urls.py: path ( \"stripe/\" , include ( \"djstripe.urls\" , namespace = \"djstripe\" )) , Tell Stripe about the webhook (Stripe webhook docs can be found here ) using the full URL of your endpoint from the urls.py step above (e.g. https://example.com/stripe/webhook ). Add your Stripe keys and set the operating mode: STRIPE_LIVE_SECRET_KEY = os.environ.get ( \"STRIPE_LIVE_SECRET_KEY\" , \"<your secret key>\" ) STRIPE_TEST_SECRET_KEY = os.environ.get ( \"STRIPE_TEST_SECRET_KEY\" , \"<your secret key>\" ) STRIPE_LIVE_MODE = False # Change to True in production DJSTRIPE_WEBHOOK_SECRET = \"whsec_xxx\" # Get it from the section in the Stripe dashboard where you added the webhook endpoint DJSTRIPE_USE_NATIVE_JSONFIELD = True # We recommend setting to True for new installations DJSTRIPE_FOREIGN_KEY_TO_FIELD = \"id\" Note djstripe expects STRIPE_LIVE_MODE to be a Boolean Type. In case you use Bash env vars or equivalent to inject its value, make sure to convert it to a Boolean type. We highly recommended the library django-environ Add some payment plans via the Stripe.com dashboard. Run the commands: python manage.py migrate python manage.py djstripe_sync_models See here for notes about usage of the Stripe Elements frontend JS library.","title":"Configuration"},{"location":"installation/#running-tests","text":"Assuming the tests are run against PostgreSQL: createdb djstripe pip install tox tox","title":"Running Tests"},{"location":"stripe_elements_js/","text":"Integrating Stripe Elements (JS SDK) Tip TLDR: If you haven't yet migrated to PaymentIntents, prefer stripe.createSource() over stripe.createToken() for better compatibility with PaymentMethods. Attention A point that can cause confusion when integrating Stripe on the web is that there are multiple generations of frontend JS APIs that use Stripe Elements with stripe js v3. In descending order of preference these are: Payment Intents (SCA compliant) The newest and preferred way of handling payments, which supports SCA compliance (3D secure etc). Charges using stripe.createSource() This creates Source objects within Stripe, and can be used for various different methods of payment (including, but not limited to cards), but isn't SCA compliant. The Card Elements Quickstart JS example can be used, except use stripe.createSource instead of stripe.createToken and the result.source instead of result.token . Checkout a working example of this Charges using stripe.createToken() This predates stripe.createSource , and creates legacy Card objects within Stripe, which have some compatibility issues with Payment Methods. If you're using stripe.createToken , see if you can upgrade to stripe.createSource or ideally to Payment Intents . Tip Checkout Card Elements Quickstart JS","title":"Integrating Stripe Elements"},{"location":"stripe_elements_js/#integrating-stripe-elements-js-sdk","text":"Tip TLDR: If you haven't yet migrated to PaymentIntents, prefer stripe.createSource() over stripe.createToken() for better compatibility with PaymentMethods. Attention A point that can cause confusion when integrating Stripe on the web is that there are multiple generations of frontend JS APIs that use Stripe Elements with stripe js v3.","title":"Integrating Stripe Elements (JS SDK)"},{"location":"stripe_elements_js/#in-descending-order-of-preference-these-are","text":"","title":"In descending order of preference these are:"},{"location":"stripe_elements_js/#payment-intents-sca-compliant","text":"The newest and preferred way of handling payments, which supports SCA compliance (3D secure etc).","title":"Payment Intents (SCA compliant)"},{"location":"stripe_elements_js/#charges-using-stripecreatesource","text":"This creates Source objects within Stripe, and can be used for various different methods of payment (including, but not limited to cards), but isn't SCA compliant. The Card Elements Quickstart JS example can be used, except use stripe.createSource instead of stripe.createToken and the result.source instead of result.token . Checkout a working example of this","title":"Charges using stripe.createSource()"},{"location":"stripe_elements_js/#charges-using-stripecreatetoken","text":"This predates stripe.createSource , and creates legacy Card objects within Stripe, which have some compatibility issues with Payment Methods. If you're using stripe.createToken , see if you can upgrade to stripe.createSource or ideally to Payment Intents . Tip Checkout Card Elements Quickstart JS","title":"Charges using stripe.createToken()"},{"location":"history/0_x/","text":"dj-stripe 0.x release notes 0.8.0 (2015-12-30) better plan ordering documentation (Thanks @cjrh) added a confirmation page when choosing a subscription (Thanks @chrissmejia, @areski) setup.py reverse dependency fix (#258/#268) (Thanks @ticosax) Dropped official support for Django 1.7 (no code changes were made) Python 3.5 support, Django 1.9.1 support Migration improvements (Thanks @michi88) Fixed \"Invoice matching query does not exist\" bug (#263) (Thanks @mthornhill) Fixed duplicate content in account view (Thanks @areski) 0.7.0 (2015-09-22) dj-stripe now responds to the invoice.created event (Thanks @wahuneke) dj-stripe now cancels subscriptions and purges customers during sync if they were deleted from the stripe dashboard (Thanks @unformatt) dj-stripe now checks for an active stripe subscription in the update_plan_quantity call (Thanks @ctrengove) Event processing is now handled by \"event handlers\" - functions outside of models that respond to various event types and subtypes. Documentation on how to tie into the event handler system coming soon. (Thanks @wahuneke) Experimental Python 3.5 support Support for Django 1.6 and lower is now officially gone. Much, much more! 0.6.0 (2015-07-12) Support for Django 1.6 and lower is now deprecated. Improved test harness now tests coverage and pep8 SubscribeFormView and ChangePlanView no longer populate self.error with form errors InvoiceItems.plan can now be null (as it is with individual charges), resolving #140 (Thanks @awechsler and @MichelleGlauser for help troubleshooting) Email templates are now packaged during distribution. sync_plans now takes an optional api_key 100% test coverage Stripe ID is now returned as part of each model's str method (Thanks @areski) Customer model now stores card expiration month and year (Thanks @jpadilla) Ability to extend subscriptions (Thanks @TigerDX) Support for plan heirarchies (Thanks @chrissmejia) Rest API endpoints for Subscriptions [contrib] (Thanks @philippeluickx) Admin interface search by email funtionality is removed (#221) (Thanks @jpadilla) 0.5.0 (2015-05-25) Began deprecation of support for Django 1.6 and lower. Added formal support for Django 1.8. Removed the StripeSubscriptionSignupForm Removed djstripe.safe_settings . Settings are now all located in djstripe.settings DJSTRIPE_TRIAL_PERIOD_FOR_SUBSCRIBER_CALLBACK can no longer be a module string The sync_subscriber argument has been renamed from subscriber_model to subscriber Moved available currencies to the DJSTRIPE_CURRENCIES setting (Thanks @martinhill) Allow passing of extra parameters to stripe Charge API (Thanks @mthornhill) Support for all available arguments when syncing plans (Thanks @jamesbrobb) charge.refund() now returns the refunded charge object (Thanks @mthornhill) Charge model now has captured field and a capture method (Thanks @mthornhill) Subscription deleted webhook bugfix South migrations are now up to date (Thanks @Tyrdall) 0.4.0 (2015-04-05) Formal Python 3.3+/Django 1.7 Support (including migrations) Removed Python 2.6 from Travis CI build. (Thanks @audreyr) Dropped Django 1.4 support. (Thanks @audreyr) Deprecated the djstripe.forms.StripeSubscriptionSignupForm . Making this form work easily with both dj-stripe and django-allauth required too much abstraction. It will be removed in the 0.5.0 release. Add the ability to add invoice items for a customer (Thanks @kavdev) Add the ability to use a custom customer model (Thanks @kavdev) Added setting to disable Invoice receipt emails (Thanks Chris Halpert) Enable proration when customer upgrades plan, and pass proration policy and cancellation at period end for upgrades in settings. (Thanks Yasmine Charif) Removed the redundant context processor. (Thanks @kavdev) Fixed create a token call in change_card.html (Thanks @dollydagr) Fix charge.dispute.closed typo. (Thanks @ipmb) Fix contributing docs formatting. (Thanks @audreyr) Fix subscription canceled_at_period_end field sync on plan upgrade (Thanks @nigma) Remove \"account\" bug in Middleware (Thanks @sromero84) Fix correct plan selection on subscription in subscribe_form template. (Thanks Yasmine Charif) Fix subscription status in account, _subscription_status, and cancel_subscription templates. (Thanks Yasmine Charif) Now using user.get_username() instead of user.username , to support custom User models. (Thanks @shvechikov) Update remaining DOM Ids for Bootstrap 3. (Thanks Yasmine Charif) Update publish command in setup.py. (Thanks @pydanny) Explicitly specify tox's virtual environment names. (Thanks @audreyr) Manually call django.setup() to populate apps registry. (Thanks @audreyr) 0.3.5 (2014-05-01) Fixed djstripe_init_customers management command so it works with custom user models. 0.3.4 (2014-05-01) Clarify documentation for redirects on app_name. If settings.DEBUG is True, then django-debug-toolbar is exempt from redirect to subscription form. Use collections.OrderedDict to ensure that plans are listed in order of price. Add ordereddict library to support Python 2.6 users. Switch from __unicode__ to __str__ methods on models to better support Python 3. Add python_2_unicode_compatible decorator to Models. Check for PY3 so the unicode(self.user) in models.Customer doesn't blow up in Python 3. 0.3.3 (2014-04-24) Increased the extendability of the views by removing as many hard-coded URLs as possible and replacing them with success_url and other attributes/methods. Added single unit purchasing to the cookbook 0.3.2 (2014-01-16) Made Yasmine Charif a core committer Take into account trial days in a subscription plan (Thanks Yasmine Charif) Correct invoice period end value (Thanks Yasmine Charif) Make plan cancellation and plan change consistently not prorating (Thanks Yasmine Charif) Fix circular import when ACCOUNT_SIGNUP_FORM_CLASS is defined (Thanks Dustin Farris) Add send e-mail receipt action in charges admin panel (Thanks Buddy Lindsay) Add created field to all ModelAdmins to help with internal auditing (Thanks Kulbir Singh) 0.3.1 (2013-11-14) Cancellation fix (Thanks Yasmine Charif) Add setup.cfg for wheel generation (Thanks Charlie Denton) 0.3.0 (2013-11-12) Fully tested against Django 1.6, 1.5, and 1.4 Fix boolean default issue in models (from now on they are all default to False ). Replace duplicated code with djstripe.utils.user_has_active_subscription . 0.2.9 (2013-09-06) Cancellation added to views. Support for kwargs on charge and invoice fetching. def charge() now supports send_receipt flag, default to True. Fixed templates to work with Bootstrap 3.0.0 column design. 0.2.8 (2013-09-02) Improved usage documentation. Corrected order of fields in StripeSubscriptionSignupForm. Corrected transaction history template layout. Updated models to take into account when settings.USE_TZ is disabled. 0.2.7 (2013-08-24) Add handy rest_framework permission class. Fixing attribution for django-stripe-payments. Add new status to Invoice model. 0.2.6 (2013-08-20) Changed name of division tag to djdiv. Added safe_setting.py module to handle edge cases when working with custom user models. Added cookbook page in the documentation. 0.2.5 (2013-08-18) Fixed bug in initial checkout You can't purchase the same plan that you currently have. 0.2.4 (2013-08-18) Recursive package finding. 0.2.3 (2013-08-16) Fix packaging so all submodules are loaded 0.2.2 (2013-08-15) Added Registration + Subscription form 0.2.1 (2013-08-12) Fixed a bug on CurrentSubscription tests Improved usage documentation Added to migration from other tools documentation 0.2.0 (2013-08-12) Cancellation of plans now works. Upgrades and downgrades of plans now work. Changing of cards now works. Added breadcrumbs to improve navigation. Improved installation instructions. Consolidation of test instructions. Minor improvement to django-stripe-payments documentation Added coverage.py to test process. Added south migrations. Fixed the subscription_payment_required function-based view decorator. Removed unnecessary django-crispy-forms 0.1.7 (2013-08-08) Middleware excepts all of the djstripe namespaced URLs. This way people can pay. 0.1.6 (2013-08-08) Fixed a couple template paths Fixed the manifest so we include html, images. 0.1.5 (2013-08-08) Fixed the manifest so we include html, css, js, images. 0.1.4 (2013-08-08) Change PaymentRequiredMixin to SubscriptionPaymentRequiredMixin Add subscription_payment_required function-based view decorator Added SubscriptionPaymentRedirectMiddleware Much nicer accounts view display Much improved subscription form display Payment plans can have decimals Payment plans can have custom images 0.1.3 (2013-08-7) Added account view Added Customer.get_or_create method Added djstripe_sync_customers management command sync file for all code that keeps things in sync with stripe Use client-side JavaScript to get history data asynchronously More user friendly action views 0.1.2 (2013-08-6) Admin working Better publish statement Fix dependencies 0.1.1 (2013-08-6) Ported internals from django-stripe-payments Began writing the views Travis-CI All tests passing on Python 2.7 and 3.3 All tests passing on Django 1.4 and 1.5 Began model cleanup Better form Provide better response from management commands 0.1.0 (2013-08-5) First release on PyPI.","title":"dj-stripe 0.x release notes"},{"location":"history/0_x/#dj-stripe-0x-release-notes","text":"","title":"dj-stripe 0.x release notes"},{"location":"history/0_x/#080-2015-12-30","text":"better plan ordering documentation (Thanks @cjrh) added a confirmation page when choosing a subscription (Thanks @chrissmejia, @areski) setup.py reverse dependency fix (#258/#268) (Thanks @ticosax) Dropped official support for Django 1.7 (no code changes were made) Python 3.5 support, Django 1.9.1 support Migration improvements (Thanks @michi88) Fixed \"Invoice matching query does not exist\" bug (#263) (Thanks @mthornhill) Fixed duplicate content in account view (Thanks @areski)","title":"0.8.0 (2015-12-30)"},{"location":"history/0_x/#070-2015-09-22","text":"dj-stripe now responds to the invoice.created event (Thanks @wahuneke) dj-stripe now cancels subscriptions and purges customers during sync if they were deleted from the stripe dashboard (Thanks @unformatt) dj-stripe now checks for an active stripe subscription in the update_plan_quantity call (Thanks @ctrengove) Event processing is now handled by \"event handlers\" - functions outside of models that respond to various event types and subtypes. Documentation on how to tie into the event handler system coming soon. (Thanks @wahuneke) Experimental Python 3.5 support Support for Django 1.6 and lower is now officially gone. Much, much more!","title":"0.7.0 (2015-09-22)"},{"location":"history/0_x/#060-2015-07-12","text":"Support for Django 1.6 and lower is now deprecated. Improved test harness now tests coverage and pep8 SubscribeFormView and ChangePlanView no longer populate self.error with form errors InvoiceItems.plan can now be null (as it is with individual charges), resolving #140 (Thanks @awechsler and @MichelleGlauser for help troubleshooting) Email templates are now packaged during distribution. sync_plans now takes an optional api_key 100% test coverage Stripe ID is now returned as part of each model's str method (Thanks @areski) Customer model now stores card expiration month and year (Thanks @jpadilla) Ability to extend subscriptions (Thanks @TigerDX) Support for plan heirarchies (Thanks @chrissmejia) Rest API endpoints for Subscriptions [contrib] (Thanks @philippeluickx) Admin interface search by email funtionality is removed (#221) (Thanks @jpadilla)","title":"0.6.0 (2015-07-12)"},{"location":"history/0_x/#050-2015-05-25","text":"Began deprecation of support for Django 1.6 and lower. Added formal support for Django 1.8. Removed the StripeSubscriptionSignupForm Removed djstripe.safe_settings . Settings are now all located in djstripe.settings DJSTRIPE_TRIAL_PERIOD_FOR_SUBSCRIBER_CALLBACK can no longer be a module string The sync_subscriber argument has been renamed from subscriber_model to subscriber Moved available currencies to the DJSTRIPE_CURRENCIES setting (Thanks @martinhill) Allow passing of extra parameters to stripe Charge API (Thanks @mthornhill) Support for all available arguments when syncing plans (Thanks @jamesbrobb) charge.refund() now returns the refunded charge object (Thanks @mthornhill) Charge model now has captured field and a capture method (Thanks @mthornhill) Subscription deleted webhook bugfix South migrations are now up to date (Thanks @Tyrdall)","title":"0.5.0 (2015-05-25)"},{"location":"history/0_x/#040-2015-04-05","text":"Formal Python 3.3+/Django 1.7 Support (including migrations) Removed Python 2.6 from Travis CI build. (Thanks @audreyr) Dropped Django 1.4 support. (Thanks @audreyr) Deprecated the djstripe.forms.StripeSubscriptionSignupForm . Making this form work easily with both dj-stripe and django-allauth required too much abstraction. It will be removed in the 0.5.0 release. Add the ability to add invoice items for a customer (Thanks @kavdev) Add the ability to use a custom customer model (Thanks @kavdev) Added setting to disable Invoice receipt emails (Thanks Chris Halpert) Enable proration when customer upgrades plan, and pass proration policy and cancellation at period end for upgrades in settings. (Thanks Yasmine Charif) Removed the redundant context processor. (Thanks @kavdev) Fixed create a token call in change_card.html (Thanks @dollydagr) Fix charge.dispute.closed typo. (Thanks @ipmb) Fix contributing docs formatting. (Thanks @audreyr) Fix subscription canceled_at_period_end field sync on plan upgrade (Thanks @nigma) Remove \"account\" bug in Middleware (Thanks @sromero84) Fix correct plan selection on subscription in subscribe_form template. (Thanks Yasmine Charif) Fix subscription status in account, _subscription_status, and cancel_subscription templates. (Thanks Yasmine Charif) Now using user.get_username() instead of user.username , to support custom User models. (Thanks @shvechikov) Update remaining DOM Ids for Bootstrap 3. (Thanks Yasmine Charif) Update publish command in setup.py. (Thanks @pydanny) Explicitly specify tox's virtual environment names. (Thanks @audreyr) Manually call django.setup() to populate apps registry. (Thanks @audreyr)","title":"0.4.0 (2015-04-05)"},{"location":"history/0_x/#035-2014-05-01","text":"Fixed djstripe_init_customers management command so it works with custom user models.","title":"0.3.5 (2014-05-01)"},{"location":"history/0_x/#034-2014-05-01","text":"Clarify documentation for redirects on app_name. If settings.DEBUG is True, then django-debug-toolbar is exempt from redirect to subscription form. Use collections.OrderedDict to ensure that plans are listed in order of price. Add ordereddict library to support Python 2.6 users. Switch from __unicode__ to __str__ methods on models to better support Python 3. Add python_2_unicode_compatible decorator to Models. Check for PY3 so the unicode(self.user) in models.Customer doesn't blow up in Python 3.","title":"0.3.4 (2014-05-01)"},{"location":"history/0_x/#033-2014-04-24","text":"Increased the extendability of the views by removing as many hard-coded URLs as possible and replacing them with success_url and other attributes/methods. Added single unit purchasing to the cookbook","title":"0.3.3 (2014-04-24)"},{"location":"history/0_x/#032-2014-01-16","text":"Made Yasmine Charif a core committer Take into account trial days in a subscription plan (Thanks Yasmine Charif) Correct invoice period end value (Thanks Yasmine Charif) Make plan cancellation and plan change consistently not prorating (Thanks Yasmine Charif) Fix circular import when ACCOUNT_SIGNUP_FORM_CLASS is defined (Thanks Dustin Farris) Add send e-mail receipt action in charges admin panel (Thanks Buddy Lindsay) Add created field to all ModelAdmins to help with internal auditing (Thanks Kulbir Singh)","title":"0.3.2 (2014-01-16)"},{"location":"history/0_x/#031-2013-11-14","text":"Cancellation fix (Thanks Yasmine Charif) Add setup.cfg for wheel generation (Thanks Charlie Denton)","title":"0.3.1 (2013-11-14)"},{"location":"history/0_x/#030-2013-11-12","text":"Fully tested against Django 1.6, 1.5, and 1.4 Fix boolean default issue in models (from now on they are all default to False ). Replace duplicated code with djstripe.utils.user_has_active_subscription .","title":"0.3.0 (2013-11-12)"},{"location":"history/0_x/#029-2013-09-06","text":"Cancellation added to views. Support for kwargs on charge and invoice fetching. def charge() now supports send_receipt flag, default to True. Fixed templates to work with Bootstrap 3.0.0 column design.","title":"0.2.9 (2013-09-06)"},{"location":"history/0_x/#028-2013-09-02","text":"Improved usage documentation. Corrected order of fields in StripeSubscriptionSignupForm. Corrected transaction history template layout. Updated models to take into account when settings.USE_TZ is disabled.","title":"0.2.8 (2013-09-02)"},{"location":"history/0_x/#027-2013-08-24","text":"Add handy rest_framework permission class. Fixing attribution for django-stripe-payments. Add new status to Invoice model.","title":"0.2.7 (2013-08-24)"},{"location":"history/0_x/#026-2013-08-20","text":"Changed name of division tag to djdiv. Added safe_setting.py module to handle edge cases when working with custom user models. Added cookbook page in the documentation.","title":"0.2.6 (2013-08-20)"},{"location":"history/0_x/#025-2013-08-18","text":"Fixed bug in initial checkout You can't purchase the same plan that you currently have.","title":"0.2.5 (2013-08-18)"},{"location":"history/0_x/#024-2013-08-18","text":"Recursive package finding.","title":"0.2.4 (2013-08-18)"},{"location":"history/0_x/#023-2013-08-16","text":"Fix packaging so all submodules are loaded","title":"0.2.3 (2013-08-16)"},{"location":"history/0_x/#022-2013-08-15","text":"Added Registration + Subscription form","title":"0.2.2 (2013-08-15)"},{"location":"history/0_x/#021-2013-08-12","text":"Fixed a bug on CurrentSubscription tests Improved usage documentation Added to migration from other tools documentation","title":"0.2.1 (2013-08-12)"},{"location":"history/0_x/#020-2013-08-12","text":"Cancellation of plans now works. Upgrades and downgrades of plans now work. Changing of cards now works. Added breadcrumbs to improve navigation. Improved installation instructions. Consolidation of test instructions. Minor improvement to django-stripe-payments documentation Added coverage.py to test process. Added south migrations. Fixed the subscription_payment_required function-based view decorator. Removed unnecessary django-crispy-forms","title":"0.2.0 (2013-08-12)"},{"location":"history/0_x/#017-2013-08-08","text":"Middleware excepts all of the djstripe namespaced URLs. This way people can pay.","title":"0.1.7 (2013-08-08)"},{"location":"history/0_x/#016-2013-08-08","text":"Fixed a couple template paths Fixed the manifest so we include html, images.","title":"0.1.6 (2013-08-08)"},{"location":"history/0_x/#015-2013-08-08","text":"Fixed the manifest so we include html, css, js, images.","title":"0.1.5 (2013-08-08)"},{"location":"history/0_x/#014-2013-08-08","text":"Change PaymentRequiredMixin to SubscriptionPaymentRequiredMixin Add subscription_payment_required function-based view decorator Added SubscriptionPaymentRedirectMiddleware Much nicer accounts view display Much improved subscription form display Payment plans can have decimals Payment plans can have custom images","title":"0.1.4 (2013-08-08)"},{"location":"history/0_x/#013-2013-08-7","text":"Added account view Added Customer.get_or_create method Added djstripe_sync_customers management command sync file for all code that keeps things in sync with stripe Use client-side JavaScript to get history data asynchronously More user friendly action views","title":"0.1.3 (2013-08-7)"},{"location":"history/0_x/#012-2013-08-6","text":"Admin working Better publish statement Fix dependencies","title":"0.1.2 (2013-08-6)"},{"location":"history/0_x/#011-2013-08-6","text":"Ported internals from django-stripe-payments Began writing the views Travis-CI All tests passing on Python 2.7 and 3.3 All tests passing on Django 1.4 and 1.5 Began model cleanup Better form Provide better response from management commands","title":"0.1.1 (2013-08-6)"},{"location":"history/0_x/#010-2013-08-5","text":"First release on PyPI.","title":"0.1.0 (2013-08-5)"},{"location":"history/1_x/","text":"dj-stripe 1.x release notes 1.2.4 (2019-02-27) This is a bugfix-only version: Allow billing_cycle_anchor argument when creating a subscription (#814) Fixup plan amount null with tier plans (#781) Update Cancel subscription view tests to match backport in f64af57 Implement Invoice._manipulate_stripe_object_hook for compatability with API 2018-11-08 (#771) Fix product webhook for type=\"good\" (#724) Add trial_from_plan, trial_period_days args to Customer.subscribe() (#709) 1.2.3 (2018-10-13) This is a bugfix-only version: Updated Subscription.cancel() for compatibility with Stripe 2018-08-23 (#723) 1.2.2 (2018-08-11) This is a bugfix-only version: Fixed an error with request.urlconf in some setups (#562) Always save text-type fields as empty strings in db instead of null (#713) Fix support for DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY (#707) Fix reactivate() with Stripe API 2018-02-28 and above 1.2.1 (2018-07-18) This is a bugfix-only version: Fixed various Python 2.7 compatibility issues Fixed issues with max_length of receipt_number Fixed various fields incorrectly marked as required Handle product webhook calls Fix compatibility with stripe-python 2.0.0 1.2.0 (2018-06-11) The dj-stripe 1.2.0 release resets all migrations. Do not upgrade to 1.2.0 directly from 1.0.1 or below. You must upgrade to 1.1.0 first. Please read the 1.1.0 release notes below for more information. 1.1.0 (2018-06-11) In dj-stripe 1.1.0, we made a lot of changes to models in order to bring the dj-stripe model state much closer to the upstream API objects. If you are a current user of dj-stripe, you will most likely have to make changes in order to upgrade. Please read the full changelog below. If you are having trouble upgrading, you may ask for help by filing an issue on GitHub . Migration reset The next version of dj-stripe, 1.2.0 , will reset all the migrations to 0001_initial . Migrations are currently in an unmaintainable state. What this means is you will not be able to upgrade directly to dj-stripe 1.2.0. You must go through 1.1.0 first, run ``manage.py migrate djstripe``, then upgrade to 1.2.0. Python 2.7 end-of-life dj-stripe 1.1.0 drops support for Django 1.10 and adds support for Django 2.0. Django 1.11+ and Python 2.7+ or 3.4+ are required. Support for Python versions older than 3.5, and Django versions older than 2.0, will be dropped in dj-stripe 2.0.0. Backwards-incompatible changes and deprecations Removal of polymorphic models The model architecture of dj-stripe has been simplified. Polymorphic models have been dropped and the old base StripeCustomer, StripeCharge, StripeInvoice, etc models have all been merged into the top-level Customer, Charge, Invoice, etc models. Importing those legacy models from djstripe.stripe_objects will yield the new ones. This is deprecated and support for this will be dropped in dj-stripe 2.0.0. Full support for Stripe Sources (Support for v3 stripe.js) Stripe sources ( src_XXXX ) are objects that can arbitrarily reference any of the payment method types that Stripe supports. However, the legacy Card object (with object IDs like card_XXXX or cc_XXXX ) is not a Source object, and cannot be turned into a Source object at this time. In order to support both Card and Source objects in ForeignKeys, a new model PaymentMethod has been devised (renamed to DjstripePaymentMethod in 2.0). That model can resolve into a Card, a Source, or a BankAccount object. The ``default_source`` attribute on ``Customer`` now refers to a ``PaymentMethod`` object . You will need to call .resolve() on it to get the Card or Source in question. References to Customer.sources expecting a queryset of Card objects should be updated to Customer.legacy_cards . The legacy StripeSource name refers to the Card model. This will be removed in dj-stripe 2.0.0. Update your references to either Card or Source . enums.SourceType has been renamed to enums.LegacySourceType . enums.SourceType now refers to the actual Stripe Source types enum. Core fields renamed The numeric id field has been renamed to djstripe_id . This avoids a clash with the upstream stripe id. Accessing .id is deprecated and **will reference the upstream stripe_id in dj-stripe 2.0.0 1.0.0 (2017-08-12) It's finally here! We've made significant changes to the codebase and are now compliant with stripe API version 2017-06-05 . I want to give a huge thanks to all of our contributors for their help in making this happen, especially Bill Huneke (@wahuneke) for his impressive design work and @jleclanche for really pushing this release along. I also want to welcome onboard two more maintainers, @jleclanche and @lskillen. They've stepped up and have graciously dedicated their resources to making dj-stripe such an amazing package. Almost all methods now mimic the parameters of those same methods in the stripe API. Note that some methods do not have some parameters implemented. This is intentional. That being said, expect all method signatures to be different than those in previous versions of dj-stripe. Finally, please note that there is still a bit of work ahead of us. Not everything in the Stripe API is currently supported by dj-stripe -- we're working on it. That said, v1.0.0 has been thoroughly tested and is verified stable in production applications. A few things to get excited for Multiple subscription support (finally) Multiple sources support (currently limited to Cards) Idempotency support (See #455, #460 for discussion -- big thanks to @jleclanche) Full model documentation Objects that come through webhooks are now tied to the API version set in dj-stripe. No more errors if dj-stripe falls behind the newest stripe API version. Any create/update action on an object automatically syncs the object. Concurrent LIVE and TEST mode support (Thanks to @jleclanche). Note that you'll run into issues if livemode isn't set on your existing customer objects. All choices are now enum-based (Thanks @jleclanche, See #520). Access them from the new djstripe.enums module. The ability to check against model property based choices will be deprecated in 1.1 Support for the Coupon model, and coupons on Customer objects. Support for the Payout/Transfer split from api version 2017-04-06 . What still needs to be done (in v1.1.0) Documentation . Our original documentation was not very helpful, but it covered the important bits. It will be very out of date after this update and will need to be rewritten. If you feel like helping, we could use all the help we can get to get this pushed out asap. Master sync re-write . This sounds scary, but really isn't. The current management methods run sync methods on Customer that aren't very helpful and are due for removal. My plan is to write something that first updates local data (via api_retrieve and sync_from_stripe_data ) and then pulls all objects from Stripe and populates the local database with any records that don't already exist there. You might be wondering, \"Why are they releasing this if there are only a few things left?\" Well, that thinking turned this into a two year release... Trust me, this is a good thing. Significant changes (mostly backwards-incompatible) Idempotency . #460 introduces idempotency keys and implements idempotency for Customer.get_or_create() . Idempotency will be enabled for all calls that need it. Improved Admin Interface . This is almost complete. See #451 and #452. Drop non-trivial endpoint views . We're dropping everything except the webhook endpoint and the subscription cancel endpoint. See #428. Drop support for sending receipts . Stripe now handles this for you. See #478. Drop support for plans as settings , including custom plan hierarchy (if you want this, write something custom) and the dynamic trial callback. We've decided to gut having plans as settings. Stripe should be your source of truth; create your plans there and sync them down manually. If you need to create plans locally for testing, etc., simply use the ORM to create Plan models. The sync rewrite will make this drop less annoying. Orphan Customer Sync . We will now sync Customer objects from Stripe even if they aren't linked to local subscriber objects. You can link up subscribers to those Customers manually. Concurrent Live and Test Mode . dj-stripe now supports test-mode and live-mode Customer objects concurrently. As a result, the User.customer One-to-One reverse-relationship is now the User.djstripe_customers RelatedManager. (Thanks @jleclanche) #440. You'll run into some dj-stripe check issues if you don't update your KEY settings accordingly. Check our GitHub issue tracker for help on this. SETTINGS The PLAN_CHOICES , PLAN_LIST , and PAYMENT_PLANS objects are removed. Use Plan.objects.all() instead. The plan_from_stripe_id function is removed. Use Plan.objects.get(stripe_id=) SYNCING sync_plans no longer takes an api_key sync methods no longer take a cu parameter All sync methods are now private. We're in the process of building a better syncing mechanism. UTILITIES dj-stripe decorators now take a plan argument. If you're passing in a custom test function to subscriber_passes_pay_test , be sure to account for this new argument. MIXINS The context provided by dj-stripe's mixins has changed. PaymentsContextMixin now provides STRIPE_PUBLIC_KEY and plans (changed to Plan.objects.all() ). SubscriptionMixin now provides customer and is_plans_plural . We've removed the SubscriptionPaymentRequiredMixin. Use @method_decorator(\"dispatch\", subscription_payment_required ) instead. MIDDLEWARE dj-stripe middleware doesn't support multiple subscriptions. SIGNALS Local custom signals are deprecated in favor of Stripe webhooks: cancelled -> WEBHOOK_SIGNALS[\"customer.subscription.deleted\"] card_changed -> WEBHOOK_SIGNALS[\"customer.source.updated\"] subscription_made -> WEBHOOK_SIGNALS[\"customer.subscription.created\"] WEBHOOK EVENTS The Event Handlers designed by @wahuneke are the new way to handle events that come through webhooks. Definitely take a look at event_handlers.py and webhooks.py . EXCEPTIONS SubscriptionUpdateFailure and SubscriptionCancellationFailure exceptions are removed. There should no longer be a case where they would have been useful. Catch native stripe errors in their place instead. MODELS CHARGE Charge.charge_created -> Charge.stripe_timestamp Charge.card_last_4 and Charge.card_kind are removed. Use Charge.source.last4 and Charge.source.brand (if the source is a Card) Charge.invoice is no longer a foreign key to the Invoice model. Invoice now has a OneToOne relationship with Charge . ( Charge.invoice will still work, but will no longer be represented in the database). CUSTOMER dj-stripe now supports test mode and live mode Customer objects concurrently (See #440). As a result, the <subscriber_model>.customer OneToOne reverse relationship is no longer a thing. You should now instead add a customer property to your subscriber model that checks whether you're in live or test mode (see djstripe.settings.STRIPE_LIVE_MODE as an example) and grabs the customer from <subscriber_model>.djstripe_customers with a simple livemode= filter. Customer no longer has a current_subscription property. We've added a subscription property that should suit your needs. With the advent of multiple subscriptions, the behavior of Customer.subscribe() has changed. Before, calling subscribe() when a customer was already subscribed to a plan would switch the customer to the new plan with an option to prorate. Now calling subscribe() simply subscribes that customer to a new plan in addition to it's current subsription. Use Subscription.update() to change a subscription's plan instead. Customer.cancel_subscription() is removed. Use Subscription.cancel() instead. The Customer.update_plan_quantity() method is removed. Use Subscription.update() instead. CustomerManager is now SubscriptionManager and works on the Subscription model instead of the Customer model. Customer.has_valid_card() is now Customer.has_valid_source() . Customer.update_card() now takes an id. If the id is not supplied, the default source is updated. Customer.stripe_customer property is removed. Use Customer.api_retrieve() instead. The at_period_end parameter of Customer.cancel_subscription() now actually follows the DJSTRIPE_PRORATION_POLICY setting. Customer.card_fingerprint , Customer.card_last_4 , Customer.card_kind , Customer.card_exp_month , Customer.card_exp_year are all removed. Check Customer.default_source (if it's a Card) or one of the sources in Customer.sources (again, if it's a Card) instead. The invoice_id parameter of Customer.add_invoice_item is now named invoice and can be either an Invoice object or the stripe_id of an Invoice. EVENT Event.kind -> Event.type Removed Event.validated_message . Just check if the event is valid no need to double check (we do that for you) TRANSFER Removed Transfer.update_status() Removed Transfer.event TransferChargeFee is removed. It hasn't been used in a while due to a broken API version. Use Transfer.fee_details instead. Any fields that were in Transfer.summary no longer exist and are therefore deprecated (unused but not removed from the database). Because of this, TransferManager now only aggregates total_sum INVOICE Invoice.attempts -> Invoice.attempt_count InvoiceItems are no longer created when Invoices are synced. You must now sync InvoiceItems directly. INVOICEITEM Removed InvoiceItem.line_type PLAN Plan no longer has a stripe_plan property. Use api_retrieve() instead. Plan.currency no longer uses choices. Use the get_supported_currency_choices() utility and create your own custom choices list instead. Plan interval choices are now in Plan.INTERVAL_TYPE_CHOICES SUBSCRIPTION Subscription.is_period_current() now checks for a current trial end if the current period has ended. This change means subscriptions extended with Subscription.extend() will now be seen as valid. MIGRATIONS We'll sync your current records with Stripe in a migration. It will take a while, but it's the only way we can ensure data integrity. There were some fields for which we needed to temporarily add placeholder defaults, so just make sure you have a customer with ID 1 and a plan with ID 1 and you shouldn't run into any issues (create dummy values for these if need be and delete them after the migration). BIG HUGE NOTE - DON'T OVERLOOK THIS Warning Subscription and InvoiceItem migration is not possible because old records don't have Stripe IDs (so we can't sync them). Our approach is to delete all local subscription and invoiceitem objects and re-sync them from Stripe. We 100% recommend you create a backup of your database before performing this upgrade. Other changes Postgres users now have access to the DJSTRIPE_USE_NATIVE_JSONFIELD setting. (Thanks @jleclanche) #517, #523 Charge receipts now take DJSTRIPE_SEND_INVOICE_RECEIPT_EMAILS into account (Thanks @r0fls) Clarified/modified installation documentation (Thanks @pydanny) Corrected and revised ANONYMOUS_USER_ERROR_MSG (Thanks @pydanny) Added fnmatching to SubscriptionPaymentMiddleware (Thanks @pydanny) SubscriptionPaymentMiddleware.process_request() functionality broken up into multiple methods, making local customizations easier (Thanks @pydanny) Fully qualified events are now supported by event handlers as strings e.g. 'customer.subscription.deleted' (Thanks @lskillen) #316 runtests now accepts positional arguments for declaring which tests to run (Thanks @lskillen) #317 It is now possible to reprocess events in both code and the admin interface (Thanks @lskillen) #318 The confirm page now checks that a valid card exists. (Thanks @scream4ik) #325 Added support for viewing upcoming invoices (Thanks @lskillen) #320 Event handler improvements and bugfixes (Thanks @lskillen) #321 API list() method bugfixes (Thanks @lskillen) #322 Added support for a custom webhook event handler (Thanks @lskillen) #323 Django REST Framework contrib package improvements (Thanks @aleccool213) #334 Added tax_percent to CreateSubscriptionSerializer (Thanks @aleccool213) #349 Fixed incorrectly assigned application_fee in Charge calls (Thanks @kronok) #382 Fixed bug caused by API change (Thanks @jessamynsmith) #353 Added inline documentation to pretty much everything and enforced docsytle via flake8 (Thanks @aleccool213) Fixed outdated method call in template (Thanks @kandoio) #391 Customer is correctly purged when subscriber is deleted, regardless of how the deletion happened (Thanks @lskillen) #396 Test webhooks are now properly captured and logged. No more bounced requests to Stripe! (Thanks @jameshiew) #408 CancelSubscriptionView redirect is now more flexible (Thanks @jleclanche) #418 Customer.sync_cards() (Thanks @jleclanche) #438 Many stability fixes, bugfixes, and code cleanup (Thanks @jleclanche) Support syncing canceled subscriptions (Thanks @jleclanche) #443 Improved admin interface (Thanks @jleclanche with @jameshiew) #451 Support concurrent TEST + LIVE API keys (Fix webhook event processing for both modes) (Thanks @jleclanche) #461 Added Stripe Dashboard link to admin change panel (Thanks @jleclanche) #465 Implemented Plan.amount_in_cents (Thanks @jleclanche) #466 Implemented Subscription.reactivate() (Thanks @jleclanche) #470 Added Plan.human_readable_price (Thanks @jleclanche) #498 (Re)attach the Subscriber when we find it's id attached to a customer on Customer sync (Thanks @jleclanche) #500 Made API version configurable (with dj-stripe recommended default) (Thanks @lskillen) #504","title":"dj-stripe 1.x release notes"},{"location":"history/1_x/#dj-stripe-1x-release-notes","text":"","title":"dj-stripe 1.x release notes"},{"location":"history/1_x/#124-2019-02-27","text":"This is a bugfix-only version: Allow billing_cycle_anchor argument when creating a subscription (#814) Fixup plan amount null with tier plans (#781) Update Cancel subscription view tests to match backport in f64af57 Implement Invoice._manipulate_stripe_object_hook for compatability with API 2018-11-08 (#771) Fix product webhook for type=\"good\" (#724) Add trial_from_plan, trial_period_days args to Customer.subscribe() (#709)","title":"1.2.4 (2019-02-27)"},{"location":"history/1_x/#123-2018-10-13","text":"This is a bugfix-only version: Updated Subscription.cancel() for compatibility with Stripe 2018-08-23 (#723)","title":"1.2.3 (2018-10-13)"},{"location":"history/1_x/#122-2018-08-11","text":"This is a bugfix-only version: Fixed an error with request.urlconf in some setups (#562) Always save text-type fields as empty strings in db instead of null (#713) Fix support for DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY (#707) Fix reactivate() with Stripe API 2018-02-28 and above","title":"1.2.2 (2018-08-11)"},{"location":"history/1_x/#121-2018-07-18","text":"This is a bugfix-only version: Fixed various Python 2.7 compatibility issues Fixed issues with max_length of receipt_number Fixed various fields incorrectly marked as required Handle product webhook calls Fix compatibility with stripe-python 2.0.0","title":"1.2.1 (2018-07-18)"},{"location":"history/1_x/#120-2018-06-11","text":"The dj-stripe 1.2.0 release resets all migrations. Do not upgrade to 1.2.0 directly from 1.0.1 or below. You must upgrade to 1.1.0 first. Please read the 1.1.0 release notes below for more information.","title":"1.2.0 (2018-06-11)"},{"location":"history/1_x/#110-2018-06-11","text":"In dj-stripe 1.1.0, we made a lot of changes to models in order to bring the dj-stripe model state much closer to the upstream API objects. If you are a current user of dj-stripe, you will most likely have to make changes in order to upgrade. Please read the full changelog below. If you are having trouble upgrading, you may ask for help by filing an issue on GitHub .","title":"1.1.0 (2018-06-11)"},{"location":"history/1_x/#migration-reset","text":"The next version of dj-stripe, 1.2.0 , will reset all the migrations to 0001_initial . Migrations are currently in an unmaintainable state. What this means is you will not be able to upgrade directly to dj-stripe 1.2.0. You must go through 1.1.0 first, run ``manage.py migrate djstripe``, then upgrade to 1.2.0.","title":"Migration reset"},{"location":"history/1_x/#python-27-end-of-life","text":"dj-stripe 1.1.0 drops support for Django 1.10 and adds support for Django 2.0. Django 1.11+ and Python 2.7+ or 3.4+ are required. Support for Python versions older than 3.5, and Django versions older than 2.0, will be dropped in dj-stripe 2.0.0.","title":"Python 2.7 end-of-life"},{"location":"history/1_x/#backwards-incompatible-changes-and-deprecations","text":"","title":"Backwards-incompatible changes and deprecations"},{"location":"history/1_x/#removal-of-polymorphic-models","text":"The model architecture of dj-stripe has been simplified. Polymorphic models have been dropped and the old base StripeCustomer, StripeCharge, StripeInvoice, etc models have all been merged into the top-level Customer, Charge, Invoice, etc models. Importing those legacy models from djstripe.stripe_objects will yield the new ones. This is deprecated and support for this will be dropped in dj-stripe 2.0.0.","title":"Removal of polymorphic models"},{"location":"history/1_x/#full-support-for-stripe-sources-support-for-v3-stripejs","text":"Stripe sources ( src_XXXX ) are objects that can arbitrarily reference any of the payment method types that Stripe supports. However, the legacy Card object (with object IDs like card_XXXX or cc_XXXX ) is not a Source object, and cannot be turned into a Source object at this time. In order to support both Card and Source objects in ForeignKeys, a new model PaymentMethod has been devised (renamed to DjstripePaymentMethod in 2.0). That model can resolve into a Card, a Source, or a BankAccount object. The ``default_source`` attribute on ``Customer`` now refers to a ``PaymentMethod`` object . You will need to call .resolve() on it to get the Card or Source in question. References to Customer.sources expecting a queryset of Card objects should be updated to Customer.legacy_cards . The legacy StripeSource name refers to the Card model. This will be removed in dj-stripe 2.0.0. Update your references to either Card or Source . enums.SourceType has been renamed to enums.LegacySourceType . enums.SourceType now refers to the actual Stripe Source types enum.","title":"Full support for Stripe Sources (Support for v3 stripe.js)"},{"location":"history/1_x/#core-fields-renamed","text":"The numeric id field has been renamed to djstripe_id . This avoids a clash with the upstream stripe id. Accessing .id is deprecated and **will reference the upstream stripe_id in dj-stripe 2.0.0","title":"Core fields renamed"},{"location":"history/1_x/#100-2017-08-12","text":"It's finally here! We've made significant changes to the codebase and are now compliant with stripe API version 2017-06-05 . I want to give a huge thanks to all of our contributors for their help in making this happen, especially Bill Huneke (@wahuneke) for his impressive design work and @jleclanche for really pushing this release along. I also want to welcome onboard two more maintainers, @jleclanche and @lskillen. They've stepped up and have graciously dedicated their resources to making dj-stripe such an amazing package. Almost all methods now mimic the parameters of those same methods in the stripe API. Note that some methods do not have some parameters implemented. This is intentional. That being said, expect all method signatures to be different than those in previous versions of dj-stripe. Finally, please note that there is still a bit of work ahead of us. Not everything in the Stripe API is currently supported by dj-stripe -- we're working on it. That said, v1.0.0 has been thoroughly tested and is verified stable in production applications.","title":"1.0.0 (2017-08-12)"},{"location":"history/1_x/#a-few-things-to-get-excited-for","text":"Multiple subscription support (finally) Multiple sources support (currently limited to Cards) Idempotency support (See #455, #460 for discussion -- big thanks to @jleclanche) Full model documentation Objects that come through webhooks are now tied to the API version set in dj-stripe. No more errors if dj-stripe falls behind the newest stripe API version. Any create/update action on an object automatically syncs the object. Concurrent LIVE and TEST mode support (Thanks to @jleclanche). Note that you'll run into issues if livemode isn't set on your existing customer objects. All choices are now enum-based (Thanks @jleclanche, See #520). Access them from the new djstripe.enums module. The ability to check against model property based choices will be deprecated in 1.1 Support for the Coupon model, and coupons on Customer objects. Support for the Payout/Transfer split from api version 2017-04-06 .","title":"A few things to get excited for"},{"location":"history/1_x/#what-still-needs-to-be-done-in-v110","text":"Documentation . Our original documentation was not very helpful, but it covered the important bits. It will be very out of date after this update and will need to be rewritten. If you feel like helping, we could use all the help we can get to get this pushed out asap. Master sync re-write . This sounds scary, but really isn't. The current management methods run sync methods on Customer that aren't very helpful and are due for removal. My plan is to write something that first updates local data (via api_retrieve and sync_from_stripe_data ) and then pulls all objects from Stripe and populates the local database with any records that don't already exist there. You might be wondering, \"Why are they releasing this if there are only a few things left?\" Well, that thinking turned this into a two year release... Trust me, this is a good thing.","title":"What still needs to be done (in v1.1.0)"},{"location":"history/1_x/#significant-changes-mostly-backwards-incompatible","text":"Idempotency . #460 introduces idempotency keys and implements idempotency for Customer.get_or_create() . Idempotency will be enabled for all calls that need it. Improved Admin Interface . This is almost complete. See #451 and #452. Drop non-trivial endpoint views . We're dropping everything except the webhook endpoint and the subscription cancel endpoint. See #428. Drop support for sending receipts . Stripe now handles this for you. See #478. Drop support for plans as settings , including custom plan hierarchy (if you want this, write something custom) and the dynamic trial callback. We've decided to gut having plans as settings. Stripe should be your source of truth; create your plans there and sync them down manually. If you need to create plans locally for testing, etc., simply use the ORM to create Plan models. The sync rewrite will make this drop less annoying. Orphan Customer Sync . We will now sync Customer objects from Stripe even if they aren't linked to local subscriber objects. You can link up subscribers to those Customers manually. Concurrent Live and Test Mode . dj-stripe now supports test-mode and live-mode Customer objects concurrently. As a result, the User.customer One-to-One reverse-relationship is now the User.djstripe_customers RelatedManager. (Thanks @jleclanche) #440. You'll run into some dj-stripe check issues if you don't update your KEY settings accordingly. Check our GitHub issue tracker for help on this.","title":"Significant changes (mostly backwards-incompatible)"},{"location":"history/1_x/#settings","text":"The PLAN_CHOICES , PLAN_LIST , and PAYMENT_PLANS objects are removed. Use Plan.objects.all() instead. The plan_from_stripe_id function is removed. Use Plan.objects.get(stripe_id=)","title":"SETTINGS"},{"location":"history/1_x/#syncing","text":"sync_plans no longer takes an api_key sync methods no longer take a cu parameter All sync methods are now private. We're in the process of building a better syncing mechanism.","title":"SYNCING"},{"location":"history/1_x/#utilities","text":"dj-stripe decorators now take a plan argument. If you're passing in a custom test function to subscriber_passes_pay_test , be sure to account for this new argument.","title":"UTILITIES"},{"location":"history/1_x/#mixins","text":"The context provided by dj-stripe's mixins has changed. PaymentsContextMixin now provides STRIPE_PUBLIC_KEY and plans (changed to Plan.objects.all() ). SubscriptionMixin now provides customer and is_plans_plural . We've removed the SubscriptionPaymentRequiredMixin. Use @method_decorator(\"dispatch\", subscription_payment_required ) instead.","title":"MIXINS"},{"location":"history/1_x/#middleware","text":"dj-stripe middleware doesn't support multiple subscriptions.","title":"MIDDLEWARE"},{"location":"history/1_x/#signals","text":"Local custom signals are deprecated in favor of Stripe webhooks: cancelled -> WEBHOOK_SIGNALS[\"customer.subscription.deleted\"] card_changed -> WEBHOOK_SIGNALS[\"customer.source.updated\"] subscription_made -> WEBHOOK_SIGNALS[\"customer.subscription.created\"]","title":"SIGNALS"},{"location":"history/1_x/#webhook-events","text":"The Event Handlers designed by @wahuneke are the new way to handle events that come through webhooks. Definitely take a look at event_handlers.py and webhooks.py .","title":"WEBHOOK EVENTS"},{"location":"history/1_x/#exceptions","text":"SubscriptionUpdateFailure and SubscriptionCancellationFailure exceptions are removed. There should no longer be a case where they would have been useful. Catch native stripe errors in their place instead.","title":"EXCEPTIONS"},{"location":"history/1_x/#models","text":"CHARGE Charge.charge_created -> Charge.stripe_timestamp Charge.card_last_4 and Charge.card_kind are removed. Use Charge.source.last4 and Charge.source.brand (if the source is a Card) Charge.invoice is no longer a foreign key to the Invoice model. Invoice now has a OneToOne relationship with Charge . ( Charge.invoice will still work, but will no longer be represented in the database). CUSTOMER dj-stripe now supports test mode and live mode Customer objects concurrently (See #440). As a result, the <subscriber_model>.customer OneToOne reverse relationship is no longer a thing. You should now instead add a customer property to your subscriber model that checks whether you're in live or test mode (see djstripe.settings.STRIPE_LIVE_MODE as an example) and grabs the customer from <subscriber_model>.djstripe_customers with a simple livemode= filter. Customer no longer has a current_subscription property. We've added a subscription property that should suit your needs. With the advent of multiple subscriptions, the behavior of Customer.subscribe() has changed. Before, calling subscribe() when a customer was already subscribed to a plan would switch the customer to the new plan with an option to prorate. Now calling subscribe() simply subscribes that customer to a new plan in addition to it's current subsription. Use Subscription.update() to change a subscription's plan instead. Customer.cancel_subscription() is removed. Use Subscription.cancel() instead. The Customer.update_plan_quantity() method is removed. Use Subscription.update() instead. CustomerManager is now SubscriptionManager and works on the Subscription model instead of the Customer model. Customer.has_valid_card() is now Customer.has_valid_source() . Customer.update_card() now takes an id. If the id is not supplied, the default source is updated. Customer.stripe_customer property is removed. Use Customer.api_retrieve() instead. The at_period_end parameter of Customer.cancel_subscription() now actually follows the DJSTRIPE_PRORATION_POLICY setting. Customer.card_fingerprint , Customer.card_last_4 , Customer.card_kind , Customer.card_exp_month , Customer.card_exp_year are all removed. Check Customer.default_source (if it's a Card) or one of the sources in Customer.sources (again, if it's a Card) instead. The invoice_id parameter of Customer.add_invoice_item is now named invoice and can be either an Invoice object or the stripe_id of an Invoice. EVENT Event.kind -> Event.type Removed Event.validated_message . Just check if the event is valid no need to double check (we do that for you) TRANSFER Removed Transfer.update_status() Removed Transfer.event TransferChargeFee is removed. It hasn't been used in a while due to a broken API version. Use Transfer.fee_details instead. Any fields that were in Transfer.summary no longer exist and are therefore deprecated (unused but not removed from the database). Because of this, TransferManager now only aggregates total_sum INVOICE Invoice.attempts -> Invoice.attempt_count InvoiceItems are no longer created when Invoices are synced. You must now sync InvoiceItems directly. INVOICEITEM Removed InvoiceItem.line_type PLAN Plan no longer has a stripe_plan property. Use api_retrieve() instead. Plan.currency no longer uses choices. Use the get_supported_currency_choices() utility and create your own custom choices list instead. Plan interval choices are now in Plan.INTERVAL_TYPE_CHOICES SUBSCRIPTION Subscription.is_period_current() now checks for a current trial end if the current period has ended. This change means subscriptions extended with Subscription.extend() will now be seen as valid.","title":"MODELS"},{"location":"history/1_x/#migrations","text":"We'll sync your current records with Stripe in a migration. It will take a while, but it's the only way we can ensure data integrity. There were some fields for which we needed to temporarily add placeholder defaults, so just make sure you have a customer with ID 1 and a plan with ID 1 and you shouldn't run into any issues (create dummy values for these if need be and delete them after the migration).","title":"MIGRATIONS"},{"location":"history/1_x/#big-huge-note-dont-overlook-this","text":"Warning Subscription and InvoiceItem migration is not possible because old records don't have Stripe IDs (so we can't sync them). Our approach is to delete all local subscription and invoiceitem objects and re-sync them from Stripe. We 100% recommend you create a backup of your database before performing this upgrade.","title":"BIG HUGE NOTE - DON'T OVERLOOK THIS"},{"location":"history/1_x/#other-changes","text":"Postgres users now have access to the DJSTRIPE_USE_NATIVE_JSONFIELD setting. (Thanks @jleclanche) #517, #523 Charge receipts now take DJSTRIPE_SEND_INVOICE_RECEIPT_EMAILS into account (Thanks @r0fls) Clarified/modified installation documentation (Thanks @pydanny) Corrected and revised ANONYMOUS_USER_ERROR_MSG (Thanks @pydanny) Added fnmatching to SubscriptionPaymentMiddleware (Thanks @pydanny) SubscriptionPaymentMiddleware.process_request() functionality broken up into multiple methods, making local customizations easier (Thanks @pydanny) Fully qualified events are now supported by event handlers as strings e.g. 'customer.subscription.deleted' (Thanks @lskillen) #316 runtests now accepts positional arguments for declaring which tests to run (Thanks @lskillen) #317 It is now possible to reprocess events in both code and the admin interface (Thanks @lskillen) #318 The confirm page now checks that a valid card exists. (Thanks @scream4ik) #325 Added support for viewing upcoming invoices (Thanks @lskillen) #320 Event handler improvements and bugfixes (Thanks @lskillen) #321 API list() method bugfixes (Thanks @lskillen) #322 Added support for a custom webhook event handler (Thanks @lskillen) #323 Django REST Framework contrib package improvements (Thanks @aleccool213) #334 Added tax_percent to CreateSubscriptionSerializer (Thanks @aleccool213) #349 Fixed incorrectly assigned application_fee in Charge calls (Thanks @kronok) #382 Fixed bug caused by API change (Thanks @jessamynsmith) #353 Added inline documentation to pretty much everything and enforced docsytle via flake8 (Thanks @aleccool213) Fixed outdated method call in template (Thanks @kandoio) #391 Customer is correctly purged when subscriber is deleted, regardless of how the deletion happened (Thanks @lskillen) #396 Test webhooks are now properly captured and logged. No more bounced requests to Stripe! (Thanks @jameshiew) #408 CancelSubscriptionView redirect is now more flexible (Thanks @jleclanche) #418 Customer.sync_cards() (Thanks @jleclanche) #438 Many stability fixes, bugfixes, and code cleanup (Thanks @jleclanche) Support syncing canceled subscriptions (Thanks @jleclanche) #443 Improved admin interface (Thanks @jleclanche with @jameshiew) #451 Support concurrent TEST + LIVE API keys (Fix webhook event processing for both modes) (Thanks @jleclanche) #461 Added Stripe Dashboard link to admin change panel (Thanks @jleclanche) #465 Implemented Plan.amount_in_cents (Thanks @jleclanche) #466 Implemented Subscription.reactivate() (Thanks @jleclanche) #470 Added Plan.human_readable_price (Thanks @jleclanche) #498 (Re)attach the Subscriber when we find it's id attached to a customer on Customer sync (Thanks @jleclanche) #500 Made API version configurable (with dj-stripe recommended default) (Thanks @lskillen) #504","title":"Other changes"},{"location":"history/2_4_0/","text":"dj-stripe 2.4.0 release notes (2020-11-19) Attention To upgrade to 2.4.0 from older versions of dj-stripe, scroll down to the Upgrade Guide . Introducing sponsorships and our first sponsor We're excited to introduce our Sponsorship tiers . Individuals may back dj-stripe to assist with development. Larger backers may choose one the paid support plans available to receive support on top of ensuring the long-term viability of the project! And this release was made possible by none other than\u2026 Stripe ! Our very first Gold sponsor. Their financial backing has allowed us to pour a lot of work that could not have otherwise happened. Release notes Support for Django 3.1 and Python 3.8. Minimum stripe-python version is now 2.48.0. Default Stripe API version is now 2020-08-27 . First-class support for the Price model, replacing Plans. Support multi-item subscriptions. Support for API keys in the database (see Managing Stripe API keys ). Support for syncing objects for multiple, different Stripe accounts. Use Django 3.1 native JSONField when available. The field djstripe_owner_account has been added to all Stripe models, and is automatically populated with the Account that owns the API key used to retrieve it. Support for subscription schedules (#899). Add support for Reporting categories and TaxIds Update many models to match latest version of the Stripe API. Fixed Account.get_default_account() for Restricted API Keys. Allow passing arbitrary arguments (any valid SDK argument) to the following methods: Customer.charge() Customer.subscribe() , Charge.capture() Subscription.update() New management command: djstripe_update_invoiceitem_ids . This command migrates InvoiceItems using Stripe's old IDs to the new ones. Hundreds of other bugfixes. New feature: in-database Stripe API keys Stripe API keys are now stored in the database, and are now editable in the admin. Warning By default, all keys are visible by anyone who has access to the dj-stripe administration. Why? As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway. In the next release, we are planning to make WebhookEndpoints (and thus webhook secrets) manageable via the database as well. Do I need to change anything? Not at this time. The settings STRIPE_LIVE_SECRET_KEY and STRIPE_TEST_SECRET_KEY can still be used. Their values will however be automatically saved to the database at the earliest opportunity. What about public keys? Setting STRIPE_LIVE_PUBLIC_KEY and STRIPE_TEST_PUBLIC_KEY will be deprecated next release. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in pk_test_ and pk_live_ will be detected as publishable keys). Deprecated features Nobody likes features being removed. However, the last few releases we have had to remove features that were not core to what dj-stripe does, or simply poorly-maintained. To keep up with the trend, we are making three major deprecations this release: Creating Plans from the Django Admin is no longer supported The Plan model was special cased in various places, including being the only one which supported being created from the Django administration. This is no longer supported. We have plans to allow creating arbitrary Stripe objects from the Django Admin, but until it can be done consistently, we have decided to remove the feature for Plans (which are deprecated by Stripe anyway). The only object type you should be dealing with from the admin is the new APIKey model. Along with this, we are also deprecating the djstripe_sync_plans_from_stripe management command. You can instead use the djstripe_sync_models management command, which supports arbitrary models. Deprecating the REST API We are dropping all support for the REST API and will be fully removing it in 2.5.0. We're doing this because we wish to keep such an API separate from dj-stripe. Work has already started on a new project, and we will be sharing more details about it soon. If you're interested in helping out, please reach out on Github ! Deprecating djstripe.middleware.SubscriptionPaymentMiddleware Large parts of dj-stripe, including this middleware, were designed before Stripe's major revamps of the old Plan model into Prices, Products, and multi-plan subscriptions. The functionality offered by the middleware is no longer adequate, and building on top of it would not be particularly robust. We may bring similar functionality back in the future, but the middleware as it is is going away (as well as the undocumented djstripe.utils.subscriber_has_active_subscription utility function). If you want to keep the functionality for your project, you may wish to copy the latest version of the middleware . Deprecating djstripe.mixins This is being deprecated for similar reasons as the SubscriptionPaymentMiddleware. However, the mixins module was undocumented and never officially supported. Other deprecations The account field on Charge has been renamed to on_behalf_of , to be consistent with Stripe's upstream model. Note that this field is separate from djstripe_owner_account , which is set by dj-stripe itself to match the account of the API key used. Account.get_connected_account_from_token() is deprecated in favour of Account.get_or_retrieve_for_api_key() , which supports more than just Connect accounts. Customer.has_active_subscription() is deprecated in favour of Customer.is_subscribed_to() . Note that the former takes a plan as argument, whereas the latter takes a product as argument. The tax_percent attribute of Invoice is no longer populated and will be removed in 2.5.0. You may want to use Invoice.default_tax_rates instead, which uses the new TaxId functionality. Customer.business_vat_id is being deprecated in favour of using TaxId models directly. Breaking changes Rename PlanBillingScheme to BillingScheme. Remove Plan.update_name() and these previously-deprecated fields: Customer.business_vat_id Subscription.start Subscription.billing Upgrade Guide Before you upgrade to dj-stripe 2.4.0, we recommend upgrading to dj-stripe 2.3.0. Upgrading one major release at a time minimizes the risk of issues arising. Upgrading directly to 2.4.0 from dj-stripe versions older than 2.2.0 is unsupported. To upgrade dj-stripe, run pip install --upgrade dj-stripe==2.4.0 . Once installed, you can run manage.py migrate djstripe to migrate the database models. Attention If you are doing multiple major dj-stripe upgrades in a row, remember to run the migrate command after every upgrade. Skipping this step WILL cause errors. Note Migrating the database models may take a long time on databases with large amounts of customers. Settings changes A new mandatory setting DJSTRIPE_FOREIGN_KEY_TO_FIELD has been added. If you are upgrading from an older version, you need to set it to \"djstripe_id\" . Setting it to \"id\" will make dj-stripe use the Stripe IDs as foreign keys. Although this is recommended for new installations, there is currently no migration available for going from \"djstripe_id\" to \"id\" . For more information on this setting, see Settings .","title":"dj-stripe 2.4 release notes"},{"location":"history/2_4_0/#dj-stripe-240-release-notes-2020-11-19","text":"Attention To upgrade to 2.4.0 from older versions of dj-stripe, scroll down to the Upgrade Guide .","title":"dj-stripe 2.4.0 release notes (2020-11-19)"},{"location":"history/2_4_0/#introducing-sponsorships-and-our-first-sponsor","text":"We're excited to introduce our Sponsorship tiers . Individuals may back dj-stripe to assist with development. Larger backers may choose one the paid support plans available to receive support on top of ensuring the long-term viability of the project! And this release was made possible by none other than\u2026 Stripe ! Our very first Gold sponsor. Their financial backing has allowed us to pour a lot of work that could not have otherwise happened.","title":"Introducing sponsorships and our first sponsor"},{"location":"history/2_4_0/#release-notes","text":"Support for Django 3.1 and Python 3.8. Minimum stripe-python version is now 2.48.0. Default Stripe API version is now 2020-08-27 . First-class support for the Price model, replacing Plans. Support multi-item subscriptions. Support for API keys in the database (see Managing Stripe API keys ). Support for syncing objects for multiple, different Stripe accounts. Use Django 3.1 native JSONField when available. The field djstripe_owner_account has been added to all Stripe models, and is automatically populated with the Account that owns the API key used to retrieve it. Support for subscription schedules (#899). Add support for Reporting categories and TaxIds Update many models to match latest version of the Stripe API. Fixed Account.get_default_account() for Restricted API Keys. Allow passing arbitrary arguments (any valid SDK argument) to the following methods: Customer.charge() Customer.subscribe() , Charge.capture() Subscription.update() New management command: djstripe_update_invoiceitem_ids . This command migrates InvoiceItems using Stripe's old IDs to the new ones. Hundreds of other bugfixes.","title":"Release notes"},{"location":"history/2_4_0/#new-feature-in-database-stripe-api-keys","text":"Stripe API keys are now stored in the database, and are now editable in the admin. Warning By default, all keys are visible by anyone who has access to the dj-stripe administration.","title":"New feature: in-database Stripe API keys"},{"location":"history/2_4_0/#why","text":"As we work on supporting multiple Stripe accounts per instance, it is vital for dj-stripe to have a mechanism to store more than one Stripe API key. It also became obvious that we may want proper programmatic access to create and delete keys. Furthermore, API keys are a legitimate upstream Stripe object, and it is not unlikely the API may allow access to listing other API keys in the future, in which case we will want to move them to the database anyway. In the next release, we are planning to make WebhookEndpoints (and thus webhook secrets) manageable via the database as well.","title":"Why?"},{"location":"history/2_4_0/#do-i-need-to-change-anything","text":"Not at this time. The settings STRIPE_LIVE_SECRET_KEY and STRIPE_TEST_SECRET_KEY can still be used. Their values will however be automatically saved to the database at the earliest opportunity.","title":"Do I need to change anything?"},{"location":"history/2_4_0/#what-about-public-keys","text":"Setting STRIPE_LIVE_PUBLIC_KEY and STRIPE_TEST_PUBLIC_KEY will be deprecated next release. You do not risk anything by leaving them in your settings: They are not used by Dj-Stripe outside of the Dj-Stripe mixins, which are now themselves deprecated. So you can safely leave them in your settings, or you can move them to the database as well (Keys beginning in pk_test_ and pk_live_ will be detected as publishable keys).","title":"What about public keys?"},{"location":"history/2_4_0/#deprecated-features","text":"Nobody likes features being removed. However, the last few releases we have had to remove features that were not core to what dj-stripe does, or simply poorly-maintained. To keep up with the trend, we are making three major deprecations this release:","title":"Deprecated features"},{"location":"history/2_4_0/#creating-plans-from-the-django-admin-is-no-longer-supported","text":"The Plan model was special cased in various places, including being the only one which supported being created from the Django administration. This is no longer supported. We have plans to allow creating arbitrary Stripe objects from the Django Admin, but until it can be done consistently, we have decided to remove the feature for Plans (which are deprecated by Stripe anyway). The only object type you should be dealing with from the admin is the new APIKey model. Along with this, we are also deprecating the djstripe_sync_plans_from_stripe management command. You can instead use the djstripe_sync_models management command, which supports arbitrary models.","title":"Creating Plans from the Django Admin is no longer supported"},{"location":"history/2_4_0/#deprecating-the-rest-api","text":"We are dropping all support for the REST API and will be fully removing it in 2.5.0. We're doing this because we wish to keep such an API separate from dj-stripe. Work has already started on a new project, and we will be sharing more details about it soon. If you're interested in helping out, please reach out on Github !","title":"Deprecating the REST API"},{"location":"history/2_4_0/#deprecating-djstripemiddlewaresubscriptionpaymentmiddleware","text":"Large parts of dj-stripe, including this middleware, were designed before Stripe's major revamps of the old Plan model into Prices, Products, and multi-plan subscriptions. The functionality offered by the middleware is no longer adequate, and building on top of it would not be particularly robust. We may bring similar functionality back in the future, but the middleware as it is is going away (as well as the undocumented djstripe.utils.subscriber_has_active_subscription utility function). If you want to keep the functionality for your project, you may wish to copy the latest version of the middleware .","title":"Deprecating djstripe.middleware.SubscriptionPaymentMiddleware"},{"location":"history/2_4_0/#deprecating-djstripemixins","text":"This is being deprecated for similar reasons as the SubscriptionPaymentMiddleware. However, the mixins module was undocumented and never officially supported.","title":"Deprecating djstripe.mixins"},{"location":"history/2_4_0/#other-deprecations","text":"The account field on Charge has been renamed to on_behalf_of , to be consistent with Stripe's upstream model. Note that this field is separate from djstripe_owner_account , which is set by dj-stripe itself to match the account of the API key used. Account.get_connected_account_from_token() is deprecated in favour of Account.get_or_retrieve_for_api_key() , which supports more than just Connect accounts. Customer.has_active_subscription() is deprecated in favour of Customer.is_subscribed_to() . Note that the former takes a plan as argument, whereas the latter takes a product as argument. The tax_percent attribute of Invoice is no longer populated and will be removed in 2.5.0. You may want to use Invoice.default_tax_rates instead, which uses the new TaxId functionality. Customer.business_vat_id is being deprecated in favour of using TaxId models directly.","title":"Other deprecations"},{"location":"history/2_4_0/#breaking-changes","text":"Rename PlanBillingScheme to BillingScheme. Remove Plan.update_name() and these previously-deprecated fields: Customer.business_vat_id Subscription.start Subscription.billing","title":"Breaking changes"},{"location":"history/2_4_0/#upgrade-guide","text":"Before you upgrade to dj-stripe 2.4.0, we recommend upgrading to dj-stripe 2.3.0. Upgrading one major release at a time minimizes the risk of issues arising. Upgrading directly to 2.4.0 from dj-stripe versions older than 2.2.0 is unsupported. To upgrade dj-stripe, run pip install --upgrade dj-stripe==2.4.0 . Once installed, you can run manage.py migrate djstripe to migrate the database models. Attention If you are doing multiple major dj-stripe upgrades in a row, remember to run the migrate command after every upgrade. Skipping this step WILL cause errors. Note Migrating the database models may take a long time on databases with large amounts of customers.","title":"Upgrade Guide"},{"location":"history/2_4_0/#settings-changes","text":"A new mandatory setting DJSTRIPE_FOREIGN_KEY_TO_FIELD has been added. If you are upgrading from an older version, you need to set it to \"djstripe_id\" . Setting it to \"id\" will make dj-stripe use the Stripe IDs as foreign keys. Although this is recommended for new installations, there is currently no migration available for going from \"djstripe_id\" to \"id\" . For more information on this setting, see Settings .","title":"Settings changes"},{"location":"history/2_4_x/","text":"dj-stripe 2.4.4 release notes (2021-05-22) Fix syncing of tax IDs in management commands Set default_auto_field in migrations to prevent creation of extra migrations Misc test and documentation fixes dj-stripe 2.4.3 release notes (2021-02-08) Fix webhook error when processing events that contain a reference to a deleted payment method (such as a refund on a payment whose card has been detached or removed) Fix a couple of regressions in djstripe_sync_models management command. dj-stripe 2.4.2 release notes (2021-01-24) Release notes Fix error in Customer.add_card() due to Stripe's sources deprecation. (#1293) Fix Subscription.update() usage of the deprecated Stripe prorate argument. dj-stripe now explicitly uses proration_behavior , setting it to \"none\" when prorate is False , and \"create_prorations\" when prorate is True . dj-stripe 2.4.1 release notes (2020-11-29) Release notes Upgrade default Stripe API version to 2020-08-27 . Although we documented doing so in 2.4.0, it was not correctly set as such. This has been fixed for consistency. The Price model was incorrectly released with an amount_in_cents property, matching that of the Plan model. However, Price amounts are already in cent. The property has been removed, use unit_amount instead. Fix Price.human_readable_price calculation Fix non-blank nullable Charge fields Fix Price.tiers not being synced correctly with djstripe_sync_models (#1284) Fix sync model recursion loop (see #1288)","title":"dj-stripe 2.4.1 release notes"},{"location":"history/2_4_x/#dj-stripe-244-release-notes-2021-05-22","text":"Fix syncing of tax IDs in management commands Set default_auto_field in migrations to prevent creation of extra migrations Misc test and documentation fixes","title":"dj-stripe 2.4.4 release notes (2021-05-22)"},{"location":"history/2_4_x/#dj-stripe-243-release-notes-2021-02-08","text":"Fix webhook error when processing events that contain a reference to a deleted payment method (such as a refund on a payment whose card has been detached or removed) Fix a couple of regressions in djstripe_sync_models management command.","title":"dj-stripe 2.4.3 release notes (2021-02-08)"},{"location":"history/2_4_x/#dj-stripe-242-release-notes-2021-01-24","text":"","title":"dj-stripe 2.4.2 release notes (2021-01-24)"},{"location":"history/2_4_x/#release-notes","text":"Fix error in Customer.add_card() due to Stripe's sources deprecation. (#1293) Fix Subscription.update() usage of the deprecated Stripe prorate argument. dj-stripe now explicitly uses proration_behavior , setting it to \"none\" when prorate is False , and \"create_prorations\" when prorate is True .","title":"Release notes"},{"location":"history/2_4_x/#dj-stripe-241-release-notes-2020-11-29","text":"","title":"dj-stripe 2.4.1 release notes (2020-11-29)"},{"location":"history/2_4_x/#release-notes_1","text":"Upgrade default Stripe API version to 2020-08-27 . Although we documented doing so in 2.4.0, it was not correctly set as such. This has been fixed for consistency. The Price model was incorrectly released with an amount_in_cents property, matching that of the Plan model. However, Price amounts are already in cent. The property has been removed, use unit_amount instead. Fix Price.human_readable_price calculation Fix non-blank nullable Charge fields Fix Price.tiers not being synced correctly with djstripe_sync_models (#1284) Fix sync model recursion loop (see #1288)","title":"Release notes"},{"location":"history/2_5_0/","text":"dj-stripe 2.5.0 (2021-06-06) Attention It is not possible to upgrade to dj-stripe 2.5.0 from versions older than 2.2.2. To upgrade from an older version, first upgrade to dj-stripe 2.2.2 . Release notes Minimum Python version is now 3.6.2. Support for Python 3.9 and Django 3.2. In keeping with upstream's cycle, Django 3.0 is no longer officially supported. (Note that it will still work, because Django 2.2 LTS is still supported.) SQLite versions older than 3.26 are no longer supported. New models: FileLink, Mandate Cards and Bank Accounts are now visible in the admin interface. Lots of model sync fixes since 2.4.0. Deprecated features The FileUpload model has been renamed File , for consistency with Stripe's SDK. Although the old name is still supported, it will eventually be removed. Deprecate charge_immediately argument to Customer.subscribe() . It did not behave as expected on recent versions of Stripe. If you were using it set to charge_immediately=False , you can instead pass collection_method=\"send_invoice\" , which will send the Customer the invoice to manually pay, instead. Breaking changes When calling Customer.delete() in prior versions of dj-stripe, the Customer object would be deleted in the upstream API and the Customer object would be retained but with a date_purged attribute. This was the only model behaving this way, and it is no longer the case. If you wish to purge a customer like before, you may call Customer.purge() instead, though that method may be removed in future versions as well. Remove deprecated DRF integration ( djstripe.contrib.rest_framework ) Remove deprecated djstripe.decorators module Remove deprecated djstripe.middleware module Remove deprecated fields Account.business_vat_id and Subscription.tax_percent Remove deprecated method Account.get_connected_account_from_token() . Use Account.get_or_retrieve_for_api_key() instead. Remove deprecated Charge.account property. Use Charge.on_behalf_of instead. Remove deprecated Customer.has_active_subscription() method. Use Customer.is_subscribed_to(product) instead. FileUploadPurpose enum has been renamed FilePurpose . FileUploadType enum has been renamed FileType .","title":"dj-stripe 2.5 release notes"},{"location":"history/2_5_0/#dj-stripe-250-2021-06-06","text":"Attention It is not possible to upgrade to dj-stripe 2.5.0 from versions older than 2.2.2. To upgrade from an older version, first upgrade to dj-stripe 2.2.2 .","title":"dj-stripe 2.5.0 (2021-06-06)"},{"location":"history/2_5_0/#release-notes","text":"Minimum Python version is now 3.6.2. Support for Python 3.9 and Django 3.2. In keeping with upstream's cycle, Django 3.0 is no longer officially supported. (Note that it will still work, because Django 2.2 LTS is still supported.) SQLite versions older than 3.26 are no longer supported. New models: FileLink, Mandate Cards and Bank Accounts are now visible in the admin interface. Lots of model sync fixes since 2.4.0.","title":"Release notes"},{"location":"history/2_5_0/#deprecated-features","text":"The FileUpload model has been renamed File , for consistency with Stripe's SDK. Although the old name is still supported, it will eventually be removed. Deprecate charge_immediately argument to Customer.subscribe() . It did not behave as expected on recent versions of Stripe. If you were using it set to charge_immediately=False , you can instead pass collection_method=\"send_invoice\" , which will send the Customer the invoice to manually pay, instead.","title":"Deprecated features"},{"location":"history/2_5_0/#breaking-changes","text":"When calling Customer.delete() in prior versions of dj-stripe, the Customer object would be deleted in the upstream API and the Customer object would be retained but with a date_purged attribute. This was the only model behaving this way, and it is no longer the case. If you wish to purge a customer like before, you may call Customer.purge() instead, though that method may be removed in future versions as well. Remove deprecated DRF integration ( djstripe.contrib.rest_framework ) Remove deprecated djstripe.decorators module Remove deprecated djstripe.middleware module Remove deprecated fields Account.business_vat_id and Subscription.tax_percent Remove deprecated method Account.get_connected_account_from_token() . Use Account.get_or_retrieve_for_api_key() instead. Remove deprecated Charge.account property. Use Charge.on_behalf_of instead. Remove deprecated Customer.has_active_subscription() method. Use Customer.is_subscribed_to(product) instead. FileUploadPurpose enum has been renamed FilePurpose . FileUploadType enum has been renamed FileType .","title":"Breaking changes"},{"location":"history/2_5_x/","text":"dj-stripe 2.5.1 (2021-07-02) Release notes Fixed migration issue for new setups using custom DJSTRIPE_CUSTOMER_MODEL . Display correct JSON for JSONFields in the Django admin. Fix manual syncing of SubscriptionItem .","title":"dj-stripe 2.5.1 (2021-07-02)"},{"location":"history/2_5_x/#dj-stripe-251-2021-07-02","text":"","title":"dj-stripe 2.5.1 (2021-07-02)"},{"location":"history/2_5_x/#release-notes","text":"Fixed migration issue for new setups using custom DJSTRIPE_CUSTOMER_MODEL . Display correct JSON for JSONFields in the Django admin. Fix manual syncing of SubscriptionItem .","title":"Release notes"},{"location":"history/2_x/","text":"dj-stripe 2.0 ~ 2.3 release notes 2.3.0 (2020-04-19) The minimum version of Django is now 2.1, and Python 3.6. Changed JSONField dependency back to jsonfield from jsonfield2 (see Warning about safe uninstall of jsonfield2 on upgrade ). Fixed handling of TaxRate events (#1094). Fixed pagination issue in Invoice.sync_from_stripe_data (#1052). Fixed pagination issues in Subscription & Charge .sync_from_stripe_data (#1054). Tidyup _stripe_object_set_total_tax_amounts unique handling (#1139). Dropped previously-deprecated Invoice fields (see https://stripe.com/docs/upgrades#2018-11-08 ): .closed .forgiven .billing (renamed to .collection_method ) Dropped previously-deprecated enums.InvoiceStatus (#1020). Deprecated the following fields - will be removed in 2.4 (#1087): Subscription.billing (use .collection_method instead) Subscription.start (use .start_date instead) Subscription.tax_percent (use .default_tax_rates instead) Added Invoice.status and enums.InvoiceStatus (#1020). Added new Invoice fields (#1020, #1087): .discount .default_source .status Added new Subscription fields (#1087): .default_payment_method .default_source .next_pending_invoice_item_invoice .pending_invoice_item_interval .pending_update .start_date Warning about safe uninstall of jsonfield2 on upgrade Both jsonfield and jsonfield2 use the same import path, so if upgrading from dj-stripe\\~=2.2.0 in an existing virtualenv, be sure to uninstall jsonfield2 first. eg: # ensure jsonfield is uninstalled before we install jsonfield2 pip uninstall jsonfield2 -y && pip install \"dj-stripe>=2.3.0dev\" Otherwise, pip uninstall jsonfield2 will remove jsonfield's jsonfield module from site-packages , which would cause errors like ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location) If you have hit this ImportError already after upgrading, running this should resolve it: # remove both jsonfield packages before reinstall to fix ImportError: pip uninstall jsonfield jsonfield2 -y && pip install \"dj-stripe>=2.3.0\" Note that this is only necessary if upgrading from dj-stripe 2.2.x, which temporarily depended on jsonfield2. This process is not necessary if upgrading from an earlier version of dj-stripe. 2.2.2 (2020-01-20) This is a bugfix-only version: Fixed handling of TaxRate events (#1094). 2.2.1 (2020-01-14) This is a bugfix-only version: Fixed bad package build. 2.2.0 (2020-01-13) Changed JSONField dependency package from jsonfield to jsonfield2 , for Django 3 compatibility (see Warning about safe uninstall of jsonfield on upgrade ). Note that Django 2.1 requires jsonfield<3.1. Added support for Django 3.0 (requires jsonfield2>=3.0.3). Added support for python 3.8. Refactored UpcomingInvoice , so it's no longer a subclass of Invoice (to allow Invoice to use ManyToManyFields ). Dropped previously-deprecated Account fields (see https://stripe.com/docs/upgrades#2019-02-19 ): .business_name .business_primary_color .business_url (changed to a property) .debit_negative_balances .decline_charge_on .display_name .legal_entity .payout_schedule .payout_statement_descriptor .statement_descriptor .support_email .support_phone .support_url .timezone .verification Dropped previously-deprecated Account.business_logo property (renamed to .branding_icon ) Dropped previously-deprecated Customer.account_balance property (renamed to .balance ) Dropped previously-deprecated properties Invoice.application_fee , Invoice.date Dropped previously-deprecated enum PaymentMethodType (use DjstripePaymentMethodType instead) Renamed Invoice.billing to .collection_method (added deprecated property for the old name). Updated Invoice model to add missing fields. Added TaxRate model, and Invoice.default_tax_rates , InvoiceItem.tax_rates , Invoice.total_tax_amounts , Subscription.default_tax_rates , SubscriptionItem.tax_rates (#1027). Change urls.py to use the new style urls. Update forward relation fields in the admin to be raw id fields. Updated StripeQuantumCurrencyAmountField and StripeDecimalCurrencyAmountField to support Stripe Large Charges (#1045). Update event handling so customer.subscription.deleted updates subscriptions to status=\"canceled\" instead of deleting it from our database, to match Stripe's behaviour (#599). Added missing Refund.reason value, increases field width (#1075). Fixed Refund.status definition, reduces field width (#1076). Deprecated non-standard Invoice.status (renamed to Invoice.legacy_status ) to make way for the Stripe field (preparation for #1020). Warning about safe uninstall of jsonfield on upgrade Both jsonfield and jsonfield2 use the same import path, so if upgrading to dj-stripe>=2.2 in an existing virtualenv, be sure to uninstall jsonfield first. eg: # ensure jsonfield is uninstalled before we install jsonfield2 pip uninstall jsonfield -y && pip install \"dj-stripe>=2.2.0\" Otherwise, pip uninstall jsonfield will remove jsonfield2\u2019s jsonfield module from site-packages , which would cause errors like ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location) If you have hit this ImportError already after upgrading, running this should resolve it: # remove both jsonfield packages before reinstall to fix ImportError: pip uninstall jsonfield jsonfield2 -y && pip install \"dj-stripe>=2.2.0\" Note on usage of Stripe Elements JS See Integrating Stripe Elements for notes about usage of the Stripe Elements frontend JS library. In summary: If you haven't yet migrated to PaymentIntents, prefer stripe.createSource() to stripe.createToken() . 2.1.1 (2019-10-01) This is a bugfix-only release: Updated webhook signals list (#1000). Fixed issue syncing PaymentIntent with destination charge (#960). Fixed Customer.subscription and .valid_subscriptions() to ignore status=incomplete_expired (#1006). Fixed error on paymentmethod.detached event with card_xxx payment methods (#967). Added PaymentMethod.detach() (#943). Updated help_text on all currency fields to make it clear if they're holding integer cents ( StripeQuantumCurrencyAmountField ) or decimal dollar (or euro, pound etc) ( StripeDecimalCurrencyAmountField ) (#999) Documented our preferred Django model field types (#986) Upcoming migration of currency fields (storage as cents instead of dollars) Please be aware that we're looking at standardising our currency storage fields as integer quanta (cents) instead of Decimal (dollar) values, to match stripe. This is intended to be part of the 3.0 release, since it will involve some breaking changes. See #955 for details and discussion. 2.1.0 (2019-09-12) Dropped Django 2.0 support The Python stripe library minimum version is now 2.32.0 , also 2.36.0 is excluded due to a regression (#991). Dropped previously-deprecated Charge.fee_details property. Dropped previously-deprecated Transfer.fee_details property. Dropped previously-deprecated field_name parameter to sync_from_stripe_data Dropped previously-deprecated alias StripeObject of StripeModel Dropped previously-deprecated alias PaymentMethod of DjstripePaymentMethod Dropped previously-deprecated properties Charge.source_type and Charge.source_stripe_id enums.PaymentMethodType has been deprecated, use enums.DjstripePaymentMethodType Made SubscriptionItem.quantity nullable as per Plans with usage_type=\"metered\" (follow-up to #865) Added manage commands djstripe_sync_models and djstripe_process_events (#727, #89) Fixed issue with re-creating a customer after Customer.purge() (#916) Fixed sync of Customer Bank Accounts (#829) Fixed Subscription.is_status_temporarily_current() (#852) New models Payment Intent Setup Intent Payment Method Session Added fields to Customer model: address , invoice_prefix , invoice_settings , phone , preferred_locales , tax_exempt Changes from API 2018-11-08: Added Invoice.auto_advance , deprecated Invoice.closed and Invoice.forgiven , see https://stripe.com/docs/billing/migration/invoice-states#upgrade-checklist Changes from API 2019-02-19: Major changes to Account fields, see https://stripe.com/docs/upgrades#2019-02-19 , updated Account fields to match API 2019-02-19: Added Account.business_profile , .business_type , .company , .individual , .requirements , .settings Deprecated the existing fields, to be removed in 2.2 Special handling of the icon and logo fields: > - Renamed Account.business_logo to Account.branding_icon > (note that in Stripe's API Account.business_logo was renamed > to Account.settings.branding_icon , and > Account.business_logo_large (which we didn't have a field > for) was renamed to Account.settings.branding_logo ) > - Added deprecated property for Account.business_logo > - Added Account.branding_logo as a ForeignKey > - Populate Account.branding_icon and .branding_logo from the > new Account.settings.branding.icon and .logo Changes from API 2019-03-14: Renamed Invoice.application_fee to Invoice.application_fee_amount (added deprecated property for the old name) Removed Invoice.date , in place of Invoice.created (added deprecated property for the old name) Added Invoice.status_transitions Renamed Customer.account_balance to Customer.balance (added deprecated property for the old name) Renamed Customer.payment_methods to Customer.customer_payment_methods Added new SubscriptionStatus.incomplete and SubscriptionStatus.incomplete_expired statuses (#974) Added new BalanceTransactionType values (#983) Squashed dev migrations As per our migration policy , unreleased migrations on the master branch have been squashed. If you have been using the 2.1.0dev branch from master, you'll need to run the squashed migrations migrations before upgrading to >=2.1.0. The simplest way to do this is to pip install dj-stripe==2.1.0rc0 and migrate, alternatively check out the 2.1.0rc0 git tag. 2.0.5 (2019-09-12) This is a bugfix-only version: Avoid stripe==2.36.0 due to regression (#991) 2.0.4 (2019-09-09) This is a bugfix-only version: Fixed irreversible migration (#909) 2.0.3 (2019-06-11) This is a bugfix-only version: In _get_or_create_from_stripe_object , wrap create _create_from_stripe_object in transaction, fixes TransactionManagementError on race condition in webhook processing (#877, #903). 2.0.2 (2019-06-09) This is a bugfix-only version: Don't save event objects if the webhook processing fails (#832). Fixed IntegrityError when REMOTE_ADDR is an empty string. Deprecated field_name parameter to sync_from_stripe_data 2.0.1 (2019-04-29) This is a bugfix-only version: Fixed an error on invoiceitem.updated (#848). Handle test webhook properly in recent versions of Stripe API (#779). At some point 2018 Stripe silently changed the ID used for test events and evt_00000000000000 is not used anymore. Fixed OperationalError seen in migration 0003 on postgres (#850). Fixed issue with migration 0003 not being unapplied correctly (#882). Fixed missing SubscriptionItem.quantity on metered Plans (#865). Fixed Plan.create() (#870). 2.0.0 (2019-03-01) The Python stripe library minimum version is now 2.3.0 . PaymentMethod has been renamed to DjstripePaymentMethod (#841). An alias remains but will be removed in the next version. Dropped support for Django<2.0, Python<3.4. Dropped previously-deprecated stripe_objects module. Dropped previously-deprecated stripe_timestamp field. Dropped previously-deprecated Charge.receipt_number field. Dropped previously-deprecated StripeSource alias for Card Dropped previously-deprecated SubscriptionView , CancelSubscriptionView and CancelSubscriptionForm . Removed the default value from DJSTRIPE_SUBSCRIPTION_REDIRECT . All stripe_id fields have been renamed id . Charge.source_type has been deprecated. Use Charge.source.type . Charge.source_stripe_id has been deprecated. Use Charge.source.id . All deprecated Transfer fields (Stripe API 2017-04-06 and older), have been dropped. This includes date , destination_type ( type ), failure_code , failure_message , statement_descriptor and status . Fixed IntegrityError when REMOTE_ADDR is missing (#640). New models: ApplicationFee ApplicationFeeRefund BalanceTransaction CountrySpec ScheduledQuery SubscriptionItem TransferReversal UsageRecord The fee and fee_details attributes of both the Charge and Transfer objects are no longer stored in the database. Instead, they access their respective new balance_transaction foreign key. Note that fee_details has been deprecated on both models. The fraudulent attribute on Charge is now a property that checks the fraud_details field. Object key validity is now always enforced (#503). Customer.sources no longer refers to a Card queryset, but to a Source queryset. In order to correctly transition, you should change all your references to customer.sources to customer.legacy_cards instead. The legacy_cards attribute already exists in 1.2.0. Customer.sources_v3 is now named Customer.sources . A new property Customer.payment_methods is now available, which allows you to iterate over all of a customer's payment methods (sources then cards). Card.customer is now nullable and cards are no longer deleted when their corresponding customer is deleted (#654). Webhook signature verification is now available and is preferred. Set the DJSTRIPE_WEBHOOK_SECRET setting to your secret to start using it. StripeObject has been renamed StripeModel . An alias remains but will be removed in the next version. The metadata key used in the Customer object can now be configured by changing the DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY setting. Setting this to None or an empty string now also disables the behaviour altogether. Text-type fields in dj-stripe will no longer ever be None. Instead, any falsy text field will return an empty string. Switched test runner to pytest-django StripeModel.sync_from_stripe_data() will now automatically retrieve related objects and populate foreign keys (#681) Added Coupon.name Added Transfer.balance_transaction Exceptions in webhooks are now re-raised as well as saved in the database (#833)","title":"dj-stripe 2.0 ~ 2.3 release notes"},{"location":"history/2_x/#dj-stripe-20-23-release-notes","text":"","title":"dj-stripe 2.0 ~ 2.3 release notes"},{"location":"history/2_x/#230-2020-04-19","text":"The minimum version of Django is now 2.1, and Python 3.6. Changed JSONField dependency back to jsonfield from jsonfield2 (see Warning about safe uninstall of jsonfield2 on upgrade ). Fixed handling of TaxRate events (#1094). Fixed pagination issue in Invoice.sync_from_stripe_data (#1052). Fixed pagination issues in Subscription & Charge .sync_from_stripe_data (#1054). Tidyup _stripe_object_set_total_tax_amounts unique handling (#1139). Dropped previously-deprecated Invoice fields (see https://stripe.com/docs/upgrades#2018-11-08 ): .closed .forgiven .billing (renamed to .collection_method ) Dropped previously-deprecated enums.InvoiceStatus (#1020). Deprecated the following fields - will be removed in 2.4 (#1087): Subscription.billing (use .collection_method instead) Subscription.start (use .start_date instead) Subscription.tax_percent (use .default_tax_rates instead) Added Invoice.status and enums.InvoiceStatus (#1020). Added new Invoice fields (#1020, #1087): .discount .default_source .status Added new Subscription fields (#1087): .default_payment_method .default_source .next_pending_invoice_item_invoice .pending_invoice_item_interval .pending_update .start_date","title":"2.3.0 (2020-04-19)"},{"location":"history/2_x/#warning-about-safe-uninstall-of-jsonfield2-on-upgrade","text":"Both jsonfield and jsonfield2 use the same import path, so if upgrading from dj-stripe\\~=2.2.0 in an existing virtualenv, be sure to uninstall jsonfield2 first. eg: # ensure jsonfield is uninstalled before we install jsonfield2 pip uninstall jsonfield2 -y && pip install \"dj-stripe>=2.3.0dev\" Otherwise, pip uninstall jsonfield2 will remove jsonfield's jsonfield module from site-packages , which would cause errors like ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location) If you have hit this ImportError already after upgrading, running this should resolve it: # remove both jsonfield packages before reinstall to fix ImportError: pip uninstall jsonfield jsonfield2 -y && pip install \"dj-stripe>=2.3.0\" Note that this is only necessary if upgrading from dj-stripe 2.2.x, which temporarily depended on jsonfield2. This process is not necessary if upgrading from an earlier version of dj-stripe.","title":"Warning about safe uninstall of jsonfield2 on upgrade"},{"location":"history/2_x/#222-2020-01-20","text":"This is a bugfix-only version: Fixed handling of TaxRate events (#1094).","title":"2.2.2 (2020-01-20)"},{"location":"history/2_x/#221-2020-01-14","text":"This is a bugfix-only version: Fixed bad package build.","title":"2.2.1 (2020-01-14)"},{"location":"history/2_x/#220-2020-01-13","text":"Changed JSONField dependency package from jsonfield to jsonfield2 , for Django 3 compatibility (see Warning about safe uninstall of jsonfield on upgrade ). Note that Django 2.1 requires jsonfield<3.1. Added support for Django 3.0 (requires jsonfield2>=3.0.3). Added support for python 3.8. Refactored UpcomingInvoice , so it's no longer a subclass of Invoice (to allow Invoice to use ManyToManyFields ). Dropped previously-deprecated Account fields (see https://stripe.com/docs/upgrades#2019-02-19 ): .business_name .business_primary_color .business_url (changed to a property) .debit_negative_balances .decline_charge_on .display_name .legal_entity .payout_schedule .payout_statement_descriptor .statement_descriptor .support_email .support_phone .support_url .timezone .verification Dropped previously-deprecated Account.business_logo property (renamed to .branding_icon ) Dropped previously-deprecated Customer.account_balance property (renamed to .balance ) Dropped previously-deprecated properties Invoice.application_fee , Invoice.date Dropped previously-deprecated enum PaymentMethodType (use DjstripePaymentMethodType instead) Renamed Invoice.billing to .collection_method (added deprecated property for the old name). Updated Invoice model to add missing fields. Added TaxRate model, and Invoice.default_tax_rates , InvoiceItem.tax_rates , Invoice.total_tax_amounts , Subscription.default_tax_rates , SubscriptionItem.tax_rates (#1027). Change urls.py to use the new style urls. Update forward relation fields in the admin to be raw id fields. Updated StripeQuantumCurrencyAmountField and StripeDecimalCurrencyAmountField to support Stripe Large Charges (#1045). Update event handling so customer.subscription.deleted updates subscriptions to status=\"canceled\" instead of deleting it from our database, to match Stripe's behaviour (#599). Added missing Refund.reason value, increases field width (#1075). Fixed Refund.status definition, reduces field width (#1076). Deprecated non-standard Invoice.status (renamed to Invoice.legacy_status ) to make way for the Stripe field (preparation for #1020).","title":"2.2.0 (2020-01-13)"},{"location":"history/2_x/#warning-about-safe-uninstall-of-jsonfield-on-upgrade","text":"Both jsonfield and jsonfield2 use the same import path, so if upgrading to dj-stripe>=2.2 in an existing virtualenv, be sure to uninstall jsonfield first. eg: # ensure jsonfield is uninstalled before we install jsonfield2 pip uninstall jsonfield -y && pip install \"dj-stripe>=2.2.0\" Otherwise, pip uninstall jsonfield will remove jsonfield2\u2019s jsonfield module from site-packages , which would cause errors like ImportError: cannot import name 'JSONField' from 'jsonfield' (unknown location) If you have hit this ImportError already after upgrading, running this should resolve it: # remove both jsonfield packages before reinstall to fix ImportError: pip uninstall jsonfield jsonfield2 -y && pip install \"dj-stripe>=2.2.0\"","title":"Warning about safe uninstall of jsonfield on upgrade"},{"location":"history/2_x/#note-on-usage-of-stripe-elements-js","text":"See Integrating Stripe Elements for notes about usage of the Stripe Elements frontend JS library. In summary: If you haven't yet migrated to PaymentIntents, prefer stripe.createSource() to stripe.createToken() .","title":"Note on usage of Stripe Elements JS"},{"location":"history/2_x/#211-2019-10-01","text":"This is a bugfix-only release: Updated webhook signals list (#1000). Fixed issue syncing PaymentIntent with destination charge (#960). Fixed Customer.subscription and .valid_subscriptions() to ignore status=incomplete_expired (#1006). Fixed error on paymentmethod.detached event with card_xxx payment methods (#967). Added PaymentMethod.detach() (#943). Updated help_text on all currency fields to make it clear if they're holding integer cents ( StripeQuantumCurrencyAmountField ) or decimal dollar (or euro, pound etc) ( StripeDecimalCurrencyAmountField ) (#999) Documented our preferred Django model field types (#986)","title":"2.1.1 (2019-10-01)"},{"location":"history/2_x/#upcoming-migration-of-currency-fields-storage-as-cents-instead-of-dollars","text":"Please be aware that we're looking at standardising our currency storage fields as integer quanta (cents) instead of Decimal (dollar) values, to match stripe. This is intended to be part of the 3.0 release, since it will involve some breaking changes. See #955 for details and discussion.","title":"Upcoming migration of currency fields (storage as cents instead of dollars)"},{"location":"history/2_x/#210-2019-09-12","text":"Dropped Django 2.0 support The Python stripe library minimum version is now 2.32.0 , also 2.36.0 is excluded due to a regression (#991). Dropped previously-deprecated Charge.fee_details property. Dropped previously-deprecated Transfer.fee_details property. Dropped previously-deprecated field_name parameter to sync_from_stripe_data Dropped previously-deprecated alias StripeObject of StripeModel Dropped previously-deprecated alias PaymentMethod of DjstripePaymentMethod Dropped previously-deprecated properties Charge.source_type and Charge.source_stripe_id enums.PaymentMethodType has been deprecated, use enums.DjstripePaymentMethodType Made SubscriptionItem.quantity nullable as per Plans with usage_type=\"metered\" (follow-up to #865) Added manage commands djstripe_sync_models and djstripe_process_events (#727, #89) Fixed issue with re-creating a customer after Customer.purge() (#916) Fixed sync of Customer Bank Accounts (#829) Fixed Subscription.is_status_temporarily_current() (#852) New models Payment Intent Setup Intent Payment Method Session Added fields to Customer model: address , invoice_prefix , invoice_settings , phone , preferred_locales , tax_exempt Changes from API 2018-11-08: Added Invoice.auto_advance , deprecated Invoice.closed and Invoice.forgiven , see https://stripe.com/docs/billing/migration/invoice-states#upgrade-checklist Changes from API 2019-02-19: Major changes to Account fields, see https://stripe.com/docs/upgrades#2019-02-19 , updated Account fields to match API 2019-02-19: Added Account.business_profile , .business_type , .company , .individual , .requirements , .settings Deprecated the existing fields, to be removed in 2.2 Special handling of the icon and logo fields: > - Renamed Account.business_logo to Account.branding_icon > (note that in Stripe's API Account.business_logo was renamed > to Account.settings.branding_icon , and > Account.business_logo_large (which we didn't have a field > for) was renamed to Account.settings.branding_logo ) > - Added deprecated property for Account.business_logo > - Added Account.branding_logo as a ForeignKey > - Populate Account.branding_icon and .branding_logo from the > new Account.settings.branding.icon and .logo Changes from API 2019-03-14: Renamed Invoice.application_fee to Invoice.application_fee_amount (added deprecated property for the old name) Removed Invoice.date , in place of Invoice.created (added deprecated property for the old name) Added Invoice.status_transitions Renamed Customer.account_balance to Customer.balance (added deprecated property for the old name) Renamed Customer.payment_methods to Customer.customer_payment_methods Added new SubscriptionStatus.incomplete and SubscriptionStatus.incomplete_expired statuses (#974) Added new BalanceTransactionType values (#983)","title":"2.1.0 (2019-09-12)"},{"location":"history/2_x/#squashed-dev-migrations","text":"As per our migration policy , unreleased migrations on the master branch have been squashed. If you have been using the 2.1.0dev branch from master, you'll need to run the squashed migrations migrations before upgrading to >=2.1.0. The simplest way to do this is to pip install dj-stripe==2.1.0rc0 and migrate, alternatively check out the 2.1.0rc0 git tag.","title":"Squashed dev migrations"},{"location":"history/2_x/#205-2019-09-12","text":"This is a bugfix-only version: Avoid stripe==2.36.0 due to regression (#991)","title":"2.0.5 (2019-09-12)"},{"location":"history/2_x/#204-2019-09-09","text":"This is a bugfix-only version: Fixed irreversible migration (#909)","title":"2.0.4 (2019-09-09)"},{"location":"history/2_x/#203-2019-06-11","text":"This is a bugfix-only version: In _get_or_create_from_stripe_object , wrap create _create_from_stripe_object in transaction, fixes TransactionManagementError on race condition in webhook processing (#877, #903).","title":"2.0.3 (2019-06-11)"},{"location":"history/2_x/#202-2019-06-09","text":"This is a bugfix-only version: Don't save event objects if the webhook processing fails (#832). Fixed IntegrityError when REMOTE_ADDR is an empty string. Deprecated field_name parameter to sync_from_stripe_data","title":"2.0.2 (2019-06-09)"},{"location":"history/2_x/#201-2019-04-29","text":"This is a bugfix-only version: Fixed an error on invoiceitem.updated (#848). Handle test webhook properly in recent versions of Stripe API (#779). At some point 2018 Stripe silently changed the ID used for test events and evt_00000000000000 is not used anymore. Fixed OperationalError seen in migration 0003 on postgres (#850). Fixed issue with migration 0003 not being unapplied correctly (#882). Fixed missing SubscriptionItem.quantity on metered Plans (#865). Fixed Plan.create() (#870).","title":"2.0.1 (2019-04-29)"},{"location":"history/2_x/#200-2019-03-01","text":"The Python stripe library minimum version is now 2.3.0 . PaymentMethod has been renamed to DjstripePaymentMethod (#841). An alias remains but will be removed in the next version. Dropped support for Django<2.0, Python<3.4. Dropped previously-deprecated stripe_objects module. Dropped previously-deprecated stripe_timestamp field. Dropped previously-deprecated Charge.receipt_number field. Dropped previously-deprecated StripeSource alias for Card Dropped previously-deprecated SubscriptionView , CancelSubscriptionView and CancelSubscriptionForm . Removed the default value from DJSTRIPE_SUBSCRIPTION_REDIRECT . All stripe_id fields have been renamed id . Charge.source_type has been deprecated. Use Charge.source.type . Charge.source_stripe_id has been deprecated. Use Charge.source.id . All deprecated Transfer fields (Stripe API 2017-04-06 and older), have been dropped. This includes date , destination_type ( type ), failure_code , failure_message , statement_descriptor and status . Fixed IntegrityError when REMOTE_ADDR is missing (#640). New models: ApplicationFee ApplicationFeeRefund BalanceTransaction CountrySpec ScheduledQuery SubscriptionItem TransferReversal UsageRecord The fee and fee_details attributes of both the Charge and Transfer objects are no longer stored in the database. Instead, they access their respective new balance_transaction foreign key. Note that fee_details has been deprecated on both models. The fraudulent attribute on Charge is now a property that checks the fraud_details field. Object key validity is now always enforced (#503). Customer.sources no longer refers to a Card queryset, but to a Source queryset. In order to correctly transition, you should change all your references to customer.sources to customer.legacy_cards instead. The legacy_cards attribute already exists in 1.2.0. Customer.sources_v3 is now named Customer.sources . A new property Customer.payment_methods is now available, which allows you to iterate over all of a customer's payment methods (sources then cards). Card.customer is now nullable and cards are no longer deleted when their corresponding customer is deleted (#654). Webhook signature verification is now available and is preferred. Set the DJSTRIPE_WEBHOOK_SECRET setting to your secret to start using it. StripeObject has been renamed StripeModel . An alias remains but will be removed in the next version. The metadata key used in the Customer object can now be configured by changing the DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY setting. Setting this to None or an empty string now also disables the behaviour altogether. Text-type fields in dj-stripe will no longer ever be None. Instead, any falsy text field will return an empty string. Switched test runner to pytest-django StripeModel.sync_from_stripe_data() will now automatically retrieve related objects and populate foreign keys (#681) Added Coupon.name Added Transfer.balance_transaction Exceptions in webhooks are now re-raised as well as saved in the database (#833)","title":"2.0.0 (2019-03-01)"},{"location":"project/authors/","text":"Credits Maintainers Alexander Kavanaugh Jerome Leclanche Major Contributors John Carter Pablo Castellano Daniel Greenfeld Lee Skillen Contributors dj-stripe is brought to you by many more open source contributors. See the complete list on Github .","title":"Credits"},{"location":"project/authors/#credits","text":"","title":"Credits"},{"location":"project/authors/#maintainers","text":"Alexander Kavanaugh Jerome Leclanche","title":"Maintainers"},{"location":"project/authors/#major-contributors","text":"John Carter Pablo Castellano Daniel Greenfeld Lee Skillen","title":"Major Contributors"},{"location":"project/authors/#contributors","text":"dj-stripe is brought to you by many more open source contributors. See the complete list on Github .","title":"Contributors"},{"location":"project/contributing/","text":"","title":"Contributing"},{"location":"project/release_process/","text":"Release Process Note Before MAJOR or MINOR releases: Review deprecation notes (eg search for \"deprecated\") and remove deprecated features as appropriate Squash migrations (ONLY on unreleased migrations) - see below Squash migrations If there's more than one unreleased migration on master consider squashing them with squashmigrations , immediately before tagging the new release: Create a new squashed migration with ./manage.py squashmigrations (only squash migrations that have never been in a tagged release) Commit the squashed migration on master with a commit message like \"Squash x.y.0dev migrations\" (this will allow users who running master to safely upgrade, see note below about rc package) Then transition the squashed migration to a normal migration as per Django: Delete all the migration files it replaces Update all migrations that depend on the deleted migrations to depend on the squashed migration instead Remove the replaces attribute in the Migration class of the squashed migration (this is how Django tells that it is a squashed migration) Commit these changes to master with a message like \"Transition squashed migration to normal migration\" Then do the normal release process - bump version as another commit and tag the release See https://docs.djangoproject.com/en/dev/topics/migrations/#migration-squashing Tag + package squashed migrations as rc package (optional) As a convenience to users who are running master, an rc version can be created to package the squashed migration. To do this, immediately after the \"Squash x.y.0dev migrations\" commit, follow the steps below but with a x.y.0rc0 version to tag and package a rc version. Users who have been using the x.y.0dev code from master can then run the squashed migrations migrations before upgrading to >=x.y.0. The simplest way to do this is to pip install dj-stripe==x.y.0rc0 and migrate, or alternatively check out the x.y.0rc0 git tag and migrate. Prepare changes for the release commit Choose your version number (using https://semver.org/ ) if there's a new migration, it should be a MAJOR.0.0 or MAJOR.MINOR.0 version. Review and update HISTORY.md Add a section for this release version Set date on this release version Check that summary of feature/fixes is since the last release is up to date Update package version number in setup.cfg Review and update supported API version in README.md (this is the most recent Stripe account version tested against, not DEFAULT_STRIPE_API_VERSION ) git add to stage these changes Create signed release commit tag Note Before doing this you should have a GPG key set up on github If you don't have a GPG key already, one method is via https://keybase.io/ , and then add it to your github profile. Create a release tag with the above staged changes (where $VERSION is the version number to be released: $ git commit -m \"Release $VERSION \" $ git tag -fsm \"Release $VERSION \" $VERSION This can be expressed as a bash function as follows: git_release() { git commit -m \"Release $1\" && git tag -fsm \"Release $1\" $1; } Push the commit and tag: $ git push --follow-tags Update/create stable branch Push these changes to the appropriate stable/MAJOR.MINOR version branch (eg stable/2.0 ) if they're not already - note that this will trigger the readthedocs build Release on pypi See https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives","title":"Release Process"},{"location":"project/release_process/#release-process","text":"Note Before MAJOR or MINOR releases: Review deprecation notes (eg search for \"deprecated\") and remove deprecated features as appropriate Squash migrations (ONLY on unreleased migrations) - see below","title":"Release Process"},{"location":"project/release_process/#squash-migrations","text":"If there's more than one unreleased migration on master consider squashing them with squashmigrations , immediately before tagging the new release: Create a new squashed migration with ./manage.py squashmigrations (only squash migrations that have never been in a tagged release) Commit the squashed migration on master with a commit message like \"Squash x.y.0dev migrations\" (this will allow users who running master to safely upgrade, see note below about rc package) Then transition the squashed migration to a normal migration as per Django: Delete all the migration files it replaces Update all migrations that depend on the deleted migrations to depend on the squashed migration instead Remove the replaces attribute in the Migration class of the squashed migration (this is how Django tells that it is a squashed migration) Commit these changes to master with a message like \"Transition squashed migration to normal migration\" Then do the normal release process - bump version as another commit and tag the release See https://docs.djangoproject.com/en/dev/topics/migrations/#migration-squashing","title":"Squash migrations"},{"location":"project/release_process/#tag-package-squashed-migrations-as-rc-package-optional","text":"As a convenience to users who are running master, an rc version can be created to package the squashed migration. To do this, immediately after the \"Squash x.y.0dev migrations\" commit, follow the steps below but with a x.y.0rc0 version to tag and package a rc version. Users who have been using the x.y.0dev code from master can then run the squashed migrations migrations before upgrading to >=x.y.0. The simplest way to do this is to pip install dj-stripe==x.y.0rc0 and migrate, or alternatively check out the x.y.0rc0 git tag and migrate.","title":"Tag + package squashed migrations as rc package (optional)"},{"location":"project/release_process/#prepare-changes-for-the-release-commit","text":"Choose your version number (using https://semver.org/ ) if there's a new migration, it should be a MAJOR.0.0 or MAJOR.MINOR.0 version. Review and update HISTORY.md Add a section for this release version Set date on this release version Check that summary of feature/fixes is since the last release is up to date Update package version number in setup.cfg Review and update supported API version in README.md (this is the most recent Stripe account version tested against, not DEFAULT_STRIPE_API_VERSION ) git add to stage these changes","title":"Prepare changes for the release commit"},{"location":"project/release_process/#create-signed-release-commit-tag","text":"Note Before doing this you should have a GPG key set up on github If you don't have a GPG key already, one method is via https://keybase.io/ , and then add it to your github profile. Create a release tag with the above staged changes (where $VERSION is the version number to be released: $ git commit -m \"Release $VERSION \" $ git tag -fsm \"Release $VERSION \" $VERSION This can be expressed as a bash function as follows: git_release() { git commit -m \"Release $1\" && git tag -fsm \"Release $1\" $1; } Push the commit and tag: $ git push --follow-tags","title":"Create signed release commit tag"},{"location":"project/release_process/#updatecreate-stable-branch","text":"Push these changes to the appropriate stable/MAJOR.MINOR version branch (eg stable/2.0 ) if they're not already - note that this will trigger the readthedocs build","title":"Update/create stable branch"},{"location":"project/release_process/#release-on-pypi","text":"See https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives","title":"Release on pypi"},{"location":"project/sponsors/","text":"Sponsors Gold Sponsors This project is sponsored by none other than Stripe , since August 2020. We're thankful for their contribution, which has allowed us to greatly improve the project, increase QA and testing, and push forward with the dj-stripe 2.4.0 release. Silver Sponsors We do not currently have any Silver sponsors. Want to be the first?","title":"Our Sponsors"},{"location":"project/sponsors/#sponsors","text":"","title":"Sponsors"},{"location":"project/sponsors/#gold-sponsors","text":"This project is sponsored by none other than Stripe , since August 2020. We're thankful for their contribution, which has allowed us to greatly improve the project, increase QA and testing, and push forward with the dj-stripe 2.4.0 release.","title":"Gold Sponsors"},{"location":"project/sponsors/#silver-sponsors","text":"We do not currently have any Silver sponsors. Want to be the first?","title":"Silver Sponsors"},{"location":"project/support/","text":"Support Support plans dj-stripe offers paid support plans via Github Sponsors: https://github.com/sponsors/dj-stripe All issues and feature requests raised by corporate sponsors will be prioritized. Gold Sponsors also get a dedicated developer point of contact, to help with any questions, issues, or general inquiries relating to dj-stripe. Bug reports and feature requests Please report any issues you come across on the Github issue tracker . Do not hesitate to leave feedback and suggestions there as well. You may also ask usage questions on the issue tracker.","title":"Support"},{"location":"project/support/#support","text":"","title":"Support"},{"location":"project/support/#support-plans","text":"dj-stripe offers paid support plans via Github Sponsors: https://github.com/sponsors/dj-stripe All issues and feature requests raised by corporate sponsors will be prioritized. Gold Sponsors also get a dedicated developer point of contact, to help with any questions, issues, or general inquiries relating to dj-stripe.","title":"Support plans"},{"location":"project/support/#bug-reports-and-feature-requests","text":"Please report any issues you come across on the Github issue tracker . Do not hesitate to leave feedback and suggestions there as well. You may also ask usage questions on the issue tracker.","title":"Bug reports and feature requests"},{"location":"project/test_fixtures/","text":"Test Fixtures dj-stripe's unit tests rely on fixtures to represent Stripe API and webhook data. Rationale These fixtures are partly hand-coded and partly generated by creating objects in Stripe and then retrieved via the API. Each approach has pros and cons: Hand-coding the fixtures allows them to be crafted specifically for a test case. They can also be terse, and nested objects can be done by reference to avoid duplication. But maintaining or upgrading them is a painstaking manual process. Generating the fixtures via Stripe gives the big advantage that Stripe schema changes are automatically represented in the fixtures, which should allow us to upgrade dj-stripe's schema to match Stripe much more easily. This would be done by updating dj-stripe's targeted API version ( DEFAULT_STRIPE_API_VERSION ), regenerating the fixtures, and updating the model to match the fixture changes. The down side is it's tricky to regenerate fixture files without introducing big changes (eg to object ids) - the script does this by mapping a dummy id to various objects. Regenerating the test fixtures To regenerate the test fixtures (e.g. to populate the fixtures with new API fields from Stripe), do the following: (one time only) Create a new Stripe account called \"dj-stripe scratch\", with country set to United States. (we use US so the currency matches the existing fixtures matches, in the future it would be good to test for other countries). If you already had this account ready and want to start again from scratch, you can delete all of the test data via the button in Settings > Data https://dashboard.stripe.com/account/data Activate a virtualenv with the dj-stripe project (see Getting Started) Set the dj-stripe secret key environment variable to the secret key for this account ( export STRIPE_SECRET_KEY=sk_test_... ) Run the manage command to create the test objects in your stripe account if they don't already exist, and regenerate the local fixture files from them: $ ./manage.py regenerate_test_fixtures The command tries to avoid inconsequential changes to the fixtures (e.g the created timestamp) by restoring a whitelist of values from the existing fixtures. This functionality can be disabled by passing the parameter --update-sideeffect-fields .","title":"Test Fixtures"},{"location":"project/test_fixtures/#test-fixtures","text":"dj-stripe's unit tests rely on fixtures to represent Stripe API and webhook data.","title":"Test Fixtures"},{"location":"project/test_fixtures/#rationale","text":"These fixtures are partly hand-coded and partly generated by creating objects in Stripe and then retrieved via the API. Each approach has pros and cons: Hand-coding the fixtures allows them to be crafted specifically for a test case. They can also be terse, and nested objects can be done by reference to avoid duplication. But maintaining or upgrading them is a painstaking manual process. Generating the fixtures via Stripe gives the big advantage that Stripe schema changes are automatically represented in the fixtures, which should allow us to upgrade dj-stripe's schema to match Stripe much more easily. This would be done by updating dj-stripe's targeted API version ( DEFAULT_STRIPE_API_VERSION ), regenerating the fixtures, and updating the model to match the fixture changes. The down side is it's tricky to regenerate fixture files without introducing big changes (eg to object ids) - the script does this by mapping a dummy id to various objects.","title":"Rationale"},{"location":"project/test_fixtures/#regenerating-the-test-fixtures","text":"To regenerate the test fixtures (e.g. to populate the fixtures with new API fields from Stripe), do the following: (one time only) Create a new Stripe account called \"dj-stripe scratch\", with country set to United States. (we use US so the currency matches the existing fixtures matches, in the future it would be good to test for other countries). If you already had this account ready and want to start again from scratch, you can delete all of the test data via the button in Settings > Data https://dashboard.stripe.com/account/data Activate a virtualenv with the dj-stripe project (see Getting Started) Set the dj-stripe secret key environment variable to the secret key for this account ( export STRIPE_SECRET_KEY=sk_test_... ) Run the manage command to create the test objects in your stripe account if they don't already exist, and regenerate the local fixture files from them: $ ./manage.py regenerate_test_fixtures The command tries to avoid inconsequential changes to the fixtures (e.g the created timestamp) by restoring a whitelist of values from the existing fixtures. This functionality can be disabled by passing the parameter --update-sideeffect-fields .","title":"Regenerating the test fixtures"},{"location":"reference/context_managers/","text":"Context Managers ::: djstripe.context_managers","title":"Context Managers"},{"location":"reference/context_managers/#context-managers","text":"::: djstripe.context_managers","title":"Context Managers"},{"location":"reference/enums/","text":"Enumerations ::: djstripe.enums","title":"Enumerations"},{"location":"reference/enums/#enumerations","text":"::: djstripe.enums","title":"Enumerations"},{"location":"reference/managers/","text":"Managers ::: djstripe.managers","title":"Managers"},{"location":"reference/managers/#managers","text":"::: djstripe.managers","title":"Managers"},{"location":"reference/models/","text":"Models Models hold the bulk of the functionality included in the dj-stripe package. Each model is tied closely to its corresponding object in the stripe dashboard. Fields that are not implemented for each model have a short reason behind the decision in the docstring for each model. Core Resources ::: djstripe.models.core Payment Methods ::: djstripe.models.payment_methods selection: filters: [\"!LegacySourceMixin$\", \"!DjstripePaymentMethod$\"] Billing ::: djstripe.models.billing selection: filters: [\"!DjstripeInvoiceTotalTaxAmount$\", \"!DjstripeUpcomingInvoiceTotalTaxAmount$\", \"!BaseInvoice$\"] Connect ::: djstripe.models.account ::: djstripe.models.connect Fraud ::: djstripe.models.fraud Orders ::: djstripe.models.orders Sigma ::: djstripe.models.sigma Webhooks ::: djstripe.models.webhooks","title":"Models"},{"location":"reference/models/#models","text":"Models hold the bulk of the functionality included in the dj-stripe package. Each model is tied closely to its corresponding object in the stripe dashboard. Fields that are not implemented for each model have a short reason behind the decision in the docstring for each model.","title":"Models"},{"location":"reference/models/#core-resources","text":"::: djstripe.models.core","title":"Core Resources"},{"location":"reference/models/#payment-methods","text":"::: djstripe.models.payment_methods selection: filters: [\"!LegacySourceMixin$\", \"!DjstripePaymentMethod$\"]","title":"Payment Methods"},{"location":"reference/models/#billing","text":"::: djstripe.models.billing selection: filters: [\"!DjstripeInvoiceTotalTaxAmount$\", \"!DjstripeUpcomingInvoiceTotalTaxAmount$\", \"!BaseInvoice$\"]","title":"Billing"},{"location":"reference/models/#connect","text":"::: djstripe.models.account ::: djstripe.models.connect","title":"Connect"},{"location":"reference/models/#fraud","text":"::: djstripe.models.fraud","title":"Fraud"},{"location":"reference/models/#orders","text":"::: djstripe.models.orders","title":"Orders"},{"location":"reference/models/#sigma","text":"::: djstripe.models.sigma","title":"Sigma"},{"location":"reference/models/#webhooks","text":"::: djstripe.models.webhooks","title":"Webhooks"},{"location":"reference/project/","text":"::: djstripe ::: tests","title":"Project"},{"location":"reference/settings/","text":"Settings STRIPE_API_VERSION (='2020-08-27') The API version used to communicate with the Stripe API is configurable, and defaults to the latest version that has been tested as working. Using a value other than the default is allowed, as a string in the format of YYYY-MM-DD. For example, you can specify \"2020-03-02\" to use that API version: STRIPE_API_VERSION = \"2020-03-02\" However you do so at your own risk, as using a value other than the default might result in incompatibilities between Stripe and this library, especially if Stripe has labelled the differences between API versions as \"Major\". Even small differences such as a new enumeration value might cause issues. For this reason it is best to assume that only the default version is supported. For more information on API versioning, see the stripe documentation . See also API Versions . DJSTRIPE_FOREIGN_KEY_TO_FIELD (Introduced in 2.4.0) DJSTRIPE_FOREIGN_KEY_TO_FIELD is a setting introduced in dj-stripe version 2.4.0. You are required to set it in 2.4.0: It does not have a default value. In 3.0.0, the default will be \"id\", and we recommend setting it to \"id\" for new installations. Older installations should set it to \"djstripe_id\". Explanation below. In dj-stripe 2.3 and before, foreign keys for Stripe models were set to point to the foreign model's djstripe_id field, a numeric integer generated by the local database. This new setting allows dj-stripe users to change it to use the \"id\" field, which is the upstream, non-numeric Stripe identifier. When using the Stripe identifier as a foreign key, synchronization between Stripe and dj-stripe can be made far more efficient and robust. Furthermore, it removes the per-installation instability of a critical value. The plan is to get rid of djstripe_id altogether for the 3.0 release (we may retain the field itself until 4.0, but it will no longer be a primary key). How to migrate older installations from \"djstripe_id\" to \"id\"? Such a migration path has not been designed at the moment. Currently if you want to switch an older installation to \"id\", the easiest way is to wipe the djstripe db and sync again from scratch. This is obviously not ideal, and we will design a proper migration path before 3.0. DJSTRIPE_IDEMPOTENCY_KEY_CALLBACK (=djstripe.settings.djstripe_settings._get_idempotency_key) A function which will return an idempotency key for a particular object_type and action pair. By default, this is set to a function which will create a djstripe.IdempotencyKey object and return its uuid . You may want to customize this if you want to give your idempotency keys a different lifecycle than they normally would get. The function takes the following signature: def get_idempotency_key ( object_type : str , action : str , livemode : bool ): return \"<idempotency key>\" The function MUST return a string suitably random for the object_type/action pair, and usable in the Stripe Idempotency-Key HTTP header. For more information, see the stripe documentation . DJSTRIPE_PRORATION_POLICY (=False) By default, plans are not prorated in dj-stripe. Concretely, this is how this translates: If a customer cancels their plan during a trial, the cancellation is effective right away. If a customer cancels their plan outside of a trial, their subscription remains active until the subscription's period end, and they do not receive a refund. If a customer switches from one plan to another, the new plan becomes effective right away, and the customer is billed for the new plan's amount. Assigning True to DJSTRIPE_PRORATION_POLICY reverses the functioning of item 2 (plan cancellation) by making a cancellation effective right away and refunding the unused balance to the customer, and affects the functioning of item 3 (plan change) by prorating the previous customer's plan towards their new plan's amount. DJSTRIPE_SUBSCRIPTION_REQUIRED_EXCEPTION_URLS (=()) Warning This functionality is deprecated. Used by djstripe.middleware.SubscriptionPaymentMiddleware Rules: \"(app_name)\" means everything from this app is exempt \"[namespace]\" means everything with this name is exempt \"namespace:name\" means this namespaced URL is exempt \"name\" means this URL is exempt The entire djstripe namespace is exempt If settings.DEBUG is True, then django-debug-toolbar is exempt Example: DJSTRIPE_SUBSCRIPTION_REQUIRED_EXCEPTION_URLS = ( \"(allauth)\" , # anything in the django-allauth URLConf \"[blogs]\" , # Anything in the blogs namespace \"products:detail\" , # A ProductDetail view you want shown to non-payers \"home\" , # Site homepage ) Note Adding app_names to applications. To make the (allauth) work, you may need to define an app_name in the include() function in the URLConf. For example: # in urls.py url ( r '^accounts/' , include ( 'allauth.urls' , app_name = \"allauth\" )), DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY (=\"djstripe_subscriber\") Every Customer object created in Stripe is tagged with metadata This setting controls what the name of the key in Stripe should be. The key name must be a string no more than 40 characters long. You may set this to None or \"\" to disable that behaviour altogether. This is probably not something you want to do, though. DJSTRIPE_SUBSCRIBER_MODEL (=settings.AUTH_USER_MODEL) If the AUTH_USER_MODEL doesn't represent the object your application's subscription holder, you may define a subscriber model to use here. It should be a string in the form of 'app.model'. Note DJSTRIPE_SUBSCRIBER_MODEL must have an email field. If your existing model has no email field, add an email property that defines an email address to use. Example Model: class Organization ( models . Model ): name = CharField ( max_length = 200 , unique = True ) admin = ForeignKey ( settings . AUTH_USER_MODEL , on_delete = CASCADE ) @property def email ( self ): return self . admin . email DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY (=\"__first__\") If the model referenced in DJSTRIPE_SUBSCRIBER_MODEL is not created in the __first__ migration of an app you can specify the migration name to depend on here. For example: \"0003_here_the_subscriber_model_was_added\" DJSTRIPE_USE_NATIVE_JSONFIELD (=False) Setting this to True will make the various dj-stripe JSON fields use the native Django JSONField model instead of the jsonfield library. On Django 3.0 and older : The django.contrib.postgres.fields.JSONField field will always be used. A Postgres backend is required (uses jsonb internally). On Django 3.1 and newer : django.models.JSONField will always be used. This field type is compatible with all database backends. Setting this to True is highly recommended. However, if you have already migrated with the old fields, migrating to the native JSONField has to be done manually and is not currently supported by dj-stripe. We will eventaully move to exclusively using the native JSONField. The native Django JSONField uses the postgres jsonb column type, which efficiently stores JSON and can be queried far moreconveniently. Django also supports querying JSONField with the ORM. DJSTRIPE_WEBHOOK_URL (=r\"^webhook/$\") This is where you can tell Stripe to send webhook responses. You can set this to what you want to prevent unnecessary hijinks from unfriendly people. As this is embedded in the URLConf, this must be a resolvable regular expression. DJSTRIPE_WEBHOOK_SECRET (=\"\") If this is set to a non-empty value, webhook signatures will be verified. Learn more about webhook signature verification . DJSTRIPE_WEBHOOK_VALIDATION= (=\"verify_signature\") This setting controls which type of validation is done on webhooks. Value can be \"verify_signature\" for signature verification (recommended default), \"retrieve_event\" for event retrieval (makes an extra HTTP request), or None for no validation at all. DJSTRIPE_WEBHOOK_TOLERANCE (=300) Controls the milliseconds tolerance which wards against replay attacks. Leave this to its default value unless you know what you're doing. DJSTRIPE_WEBHOOK_EVENT_CALLBACK (=None) Webhook event callbacks allow an application to take control of what happens when an event from Stripe is received. It must be a callable or importable string to a callable that takes an event object. One suggestion is to put the event onto a task queue (such as celery) for asynchronous processing. Examples: # callbacks.py def webhook_event_callback ( event ): \"\"\" Dispatches the event to celery for processing. \"\"\" from . import tasks # Ansychronous hand-off to celery so that we can continue immediately tasks . process_webhook_event . s ( event . pk ) . apply_async () # tasks.py from djstripe.models import WebhookEventTrigger from stripe.error import StripeError @shared_task ( bind = True ) def process_webhook_event ( self , pk ): \"\"\" Processes events from Stripe asynchronously. \"\"\" logger . info ( f \"Processing Stripe event: { pk } \" ) try : # get the event obj = WebhookEventTrigger . objects . get ( pk = pk ) # process the event. # internally, this creates a Stripe WebhookEvent Object and invokes the respective Webhooks event = obj . process () except StripeError as exc : logger . error ( f \"Failed to process Stripe event: { pk } . Retrying in 60 seconds.\" ) raise self . retry ( exc = exc , countdown = 60 ) # retry after 60 seconds except WebhookEventTrigger . DoesNotExist as exc : # This can happen in case the celery task got executed before the actual model got saved to the DB raise self . retry ( exc = exc , countdown = 10 ) # retry after 10 seconds return event . type or \"Stripe Event Processed\" # settings.py DJSTRIPE_WEBHOOK_EVENT_CALLBACK = 'callbacks.webhook_event_callback' STRIPE_API_HOST (= unset) If set, this sets the base API host for Stripe. You may want to set this to, for example, \"http://localhost:12111\" if you are running stripe-mock . If this is set in production (DEBUG=False), a warning will be raised on manage.py check . Source Code ::: djstripe.settings selection: filters: - \"!^ [^ ]\"","title":"Settings"},{"location":"reference/settings/#settings","text":"","title":"Settings"},{"location":"reference/settings/#stripe_api_version-2020-08-27","text":"The API version used to communicate with the Stripe API is configurable, and defaults to the latest version that has been tested as working. Using a value other than the default is allowed, as a string in the format of YYYY-MM-DD. For example, you can specify \"2020-03-02\" to use that API version: STRIPE_API_VERSION = \"2020-03-02\" However you do so at your own risk, as using a value other than the default might result in incompatibilities between Stripe and this library, especially if Stripe has labelled the differences between API versions as \"Major\". Even small differences such as a new enumeration value might cause issues. For this reason it is best to assume that only the default version is supported. For more information on API versioning, see the stripe documentation . See also API Versions .","title":"STRIPE_API_VERSION (='2020-08-27')"},{"location":"reference/settings/#djstripe_foreign_key_to_field","text":"(Introduced in 2.4.0) DJSTRIPE_FOREIGN_KEY_TO_FIELD is a setting introduced in dj-stripe version 2.4.0. You are required to set it in 2.4.0: It does not have a default value. In 3.0.0, the default will be \"id\", and we recommend setting it to \"id\" for new installations. Older installations should set it to \"djstripe_id\". Explanation below. In dj-stripe 2.3 and before, foreign keys for Stripe models were set to point to the foreign model's djstripe_id field, a numeric integer generated by the local database. This new setting allows dj-stripe users to change it to use the \"id\" field, which is the upstream, non-numeric Stripe identifier. When using the Stripe identifier as a foreign key, synchronization between Stripe and dj-stripe can be made far more efficient and robust. Furthermore, it removes the per-installation instability of a critical value. The plan is to get rid of djstripe_id altogether for the 3.0 release (we may retain the field itself until 4.0, but it will no longer be a primary key). How to migrate older installations from \"djstripe_id\" to \"id\"? Such a migration path has not been designed at the moment. Currently if you want to switch an older installation to \"id\", the easiest way is to wipe the djstripe db and sync again from scratch. This is obviously not ideal, and we will design a proper migration path before 3.0.","title":"DJSTRIPE_FOREIGN_KEY_TO_FIELD"},{"location":"reference/settings/#djstripe_idempotency_key_callback-djstripesettingsdjstripe_settings_get_idempotency_key","text":"A function which will return an idempotency key for a particular object_type and action pair. By default, this is set to a function which will create a djstripe.IdempotencyKey object and return its uuid . You may want to customize this if you want to give your idempotency keys a different lifecycle than they normally would get. The function takes the following signature: def get_idempotency_key ( object_type : str , action : str , livemode : bool ): return \"<idempotency key>\" The function MUST return a string suitably random for the object_type/action pair, and usable in the Stripe Idempotency-Key HTTP header. For more information, see the stripe documentation .","title":"DJSTRIPE_IDEMPOTENCY_KEY_CALLBACK (=djstripe.settings.djstripe_settings._get_idempotency_key)"},{"location":"reference/settings/#djstripe_proration_policy-false","text":"By default, plans are not prorated in dj-stripe. Concretely, this is how this translates: If a customer cancels their plan during a trial, the cancellation is effective right away. If a customer cancels their plan outside of a trial, their subscription remains active until the subscription's period end, and they do not receive a refund. If a customer switches from one plan to another, the new plan becomes effective right away, and the customer is billed for the new plan's amount. Assigning True to DJSTRIPE_PRORATION_POLICY reverses the functioning of item 2 (plan cancellation) by making a cancellation effective right away and refunding the unused balance to the customer, and affects the functioning of item 3 (plan change) by prorating the previous customer's plan towards their new plan's amount.","title":"DJSTRIPE_PRORATION_POLICY (=False)"},{"location":"reference/settings/#djstripe_subscription_required_exception_urls","text":"Warning This functionality is deprecated. Used by djstripe.middleware.SubscriptionPaymentMiddleware Rules: \"(app_name)\" means everything from this app is exempt \"[namespace]\" means everything with this name is exempt \"namespace:name\" means this namespaced URL is exempt \"name\" means this URL is exempt The entire djstripe namespace is exempt If settings.DEBUG is True, then django-debug-toolbar is exempt Example: DJSTRIPE_SUBSCRIPTION_REQUIRED_EXCEPTION_URLS = ( \"(allauth)\" , # anything in the django-allauth URLConf \"[blogs]\" , # Anything in the blogs namespace \"products:detail\" , # A ProductDetail view you want shown to non-payers \"home\" , # Site homepage ) Note Adding app_names to applications. To make the (allauth) work, you may need to define an app_name in the include() function in the URLConf. For example: # in urls.py url ( r '^accounts/' , include ( 'allauth.urls' , app_name = \"allauth\" )),","title":"DJSTRIPE_SUBSCRIPTION_REQUIRED_EXCEPTION_URLS (=())"},{"location":"reference/settings/#djstripe_subscriber_customer_key-djstripe_subscriber","text":"Every Customer object created in Stripe is tagged with metadata This setting controls what the name of the key in Stripe should be. The key name must be a string no more than 40 characters long. You may set this to None or \"\" to disable that behaviour altogether. This is probably not something you want to do, though.","title":"DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY (=\"djstripe_subscriber\")"},{"location":"reference/settings/#djstripe_subscriber_model-settingsauth_user_model","text":"If the AUTH_USER_MODEL doesn't represent the object your application's subscription holder, you may define a subscriber model to use here. It should be a string in the form of 'app.model'. Note DJSTRIPE_SUBSCRIBER_MODEL must have an email field. If your existing model has no email field, add an email property that defines an email address to use. Example Model: class Organization ( models . Model ): name = CharField ( max_length = 200 , unique = True ) admin = ForeignKey ( settings . AUTH_USER_MODEL , on_delete = CASCADE ) @property def email ( self ): return self . admin . email","title":"DJSTRIPE_SUBSCRIBER_MODEL (=settings.AUTH_USER_MODEL)"},{"location":"reference/settings/#djstripe_subscriber_model_migration_dependency-__first__","text":"If the model referenced in DJSTRIPE_SUBSCRIBER_MODEL is not created in the __first__ migration of an app you can specify the migration name to depend on here. For example: \"0003_here_the_subscriber_model_was_added\"","title":"DJSTRIPE_SUBSCRIBER_MODEL_MIGRATION_DEPENDENCY (=\"__first__\")"},{"location":"reference/settings/#djstripe_use_native_jsonfield-false","text":"Setting this to True will make the various dj-stripe JSON fields use the native Django JSONField model instead of the jsonfield library. On Django 3.0 and older : The django.contrib.postgres.fields.JSONField field will always be used. A Postgres backend is required (uses jsonb internally). On Django 3.1 and newer : django.models.JSONField will always be used. This field type is compatible with all database backends. Setting this to True is highly recommended. However, if you have already migrated with the old fields, migrating to the native JSONField has to be done manually and is not currently supported by dj-stripe. We will eventaully move to exclusively using the native JSONField. The native Django JSONField uses the postgres jsonb column type, which efficiently stores JSON and can be queried far moreconveniently. Django also supports querying JSONField with the ORM.","title":"DJSTRIPE_USE_NATIVE_JSONFIELD (=False)"},{"location":"reference/settings/#djstripe_webhook_url-rwebhook","text":"This is where you can tell Stripe to send webhook responses. You can set this to what you want to prevent unnecessary hijinks from unfriendly people. As this is embedded in the URLConf, this must be a resolvable regular expression.","title":"DJSTRIPE_WEBHOOK_URL (=r\"^webhook/$\")"},{"location":"reference/settings/#djstripe_webhook_secret","text":"If this is set to a non-empty value, webhook signatures will be verified. Learn more about webhook signature verification .","title":"DJSTRIPE_WEBHOOK_SECRET (=\"\")"},{"location":"reference/settings/#djstripe_webhook_validation-verify_signature","text":"This setting controls which type of validation is done on webhooks. Value can be \"verify_signature\" for signature verification (recommended default), \"retrieve_event\" for event retrieval (makes an extra HTTP request), or None for no validation at all.","title":"DJSTRIPE_WEBHOOK_VALIDATION= (=\"verify_signature\")"},{"location":"reference/settings/#djstripe_webhook_tolerance-300","text":"Controls the milliseconds tolerance which wards against replay attacks. Leave this to its default value unless you know what you're doing.","title":"DJSTRIPE_WEBHOOK_TOLERANCE (=300)"},{"location":"reference/settings/#djstripe_webhook_event_callback-none","text":"Webhook event callbacks allow an application to take control of what happens when an event from Stripe is received. It must be a callable or importable string to a callable that takes an event object. One suggestion is to put the event onto a task queue (such as celery) for asynchronous processing. Examples: # callbacks.py def webhook_event_callback ( event ): \"\"\" Dispatches the event to celery for processing. \"\"\" from . import tasks # Ansychronous hand-off to celery so that we can continue immediately tasks . process_webhook_event . s ( event . pk ) . apply_async () # tasks.py from djstripe.models import WebhookEventTrigger from stripe.error import StripeError @shared_task ( bind = True ) def process_webhook_event ( self , pk ): \"\"\" Processes events from Stripe asynchronously. \"\"\" logger . info ( f \"Processing Stripe event: { pk } \" ) try : # get the event obj = WebhookEventTrigger . objects . get ( pk = pk ) # process the event. # internally, this creates a Stripe WebhookEvent Object and invokes the respective Webhooks event = obj . process () except StripeError as exc : logger . error ( f \"Failed to process Stripe event: { pk } . Retrying in 60 seconds.\" ) raise self . retry ( exc = exc , countdown = 60 ) # retry after 60 seconds except WebhookEventTrigger . DoesNotExist as exc : # This can happen in case the celery task got executed before the actual model got saved to the DB raise self . retry ( exc = exc , countdown = 10 ) # retry after 10 seconds return event . type or \"Stripe Event Processed\" # settings.py DJSTRIPE_WEBHOOK_EVENT_CALLBACK = 'callbacks.webhook_event_callback'","title":"DJSTRIPE_WEBHOOK_EVENT_CALLBACK (=None)"},{"location":"reference/settings/#stripe_api_host-unset","text":"If set, this sets the base API host for Stripe. You may want to set this to, for example, \"http://localhost:12111\" if you are running stripe-mock . If this is set in production (DEBUG=False), a warning will be raised on manage.py check .","title":"STRIPE_API_HOST (= unset)"},{"location":"reference/settings/#source-code","text":"::: djstripe.settings selection: filters: - \"!^ [^ ]\"","title":"Source Code"},{"location":"reference/utils/","text":"Utilities ::: djstripe.utils","title":"Utilities"},{"location":"reference/utils/#utilities","text":"::: djstripe.utils","title":"Utilities"},{"location":"usage/creating_individual_charges/","text":"Creating individual charges On the subscriber's customer object, use the charge method to generate a Stripe charge. In this example, we're using the user named admin as the subscriber. from decimal import Decimal from django.contrib.auth import get_user_model from djstripe.models import Customer user = get_user_model () . objects . get ( username = \"admin\" ) customer , created = Customer . get_or_create ( subscriber = user ) customer . charge ( Decimal ( 10.00 ), currency = \"usd\" ) # Create charge for 10.00 USD","title":"Creating individual charges"},{"location":"usage/creating_individual_charges/#creating-individual-charges","text":"On the subscriber's customer object, use the charge method to generate a Stripe charge. In this example, we're using the user named admin as the subscriber. from decimal import Decimal from django.contrib.auth import get_user_model from djstripe.models import Customer user = get_user_model () . objects . get ( username = \"admin\" ) customer , created = Customer . get_or_create ( subscriber = user ) customer . charge ( Decimal ( 10.00 ), currency = \"usd\" ) # Create charge for 10.00 USD","title":"Creating individual charges"},{"location":"usage/creating_usage_record/","text":"Create a Stripe Usage Record Usage records allow you to report customer usage and metrics to Stripe for metered billing of subscription prices Usage records created using Djstripe's UsageRecord.create() method will both create and sync the created UsageRecord object with your db. Note UsageRecord objects created directly will not sync because Stripe does not expose a way to retrieve UsageRecord objects directly. They can thus only be synced at creation time. Code: from djstripe.models import UsageRecord # create and sync UsageRecord object UsageRecord . create ( id =< SUBSCRIPTION_ITEM_ID > , quantity =< SUBSCRIPTION_ITEM_QUANTITY > , timestamp = timestamp )","title":"Creating Usage Records"},{"location":"usage/creating_usage_record/#create-a-stripe-usage-record","text":"Usage records allow you to report customer usage and metrics to Stripe for metered billing of subscription prices Usage records created using Djstripe's UsageRecord.create() method will both create and sync the created UsageRecord object with your db. Note UsageRecord objects created directly will not sync because Stripe does not expose a way to retrieve UsageRecord objects directly. They can thus only be synced at creation time.","title":"Create a Stripe Usage Record"},{"location":"usage/creating_usage_record/#code","text":"from djstripe.models import UsageRecord # create and sync UsageRecord object UsageRecord . create ( id =< SUBSCRIPTION_ITEM_ID > , quantity =< SUBSCRIPTION_ITEM_QUANTITY > , timestamp = timestamp )","title":"Code:"},{"location":"usage/managing_subscriptions/","text":"Managing subscriptions and payment sources Extending subscriptions For your convenience, dj-stripe provides a Subscription.extend(*delta*) method Subscriptions can be extended by using the Subscription.extend method, which takes a positive timedelta as its only property. This method is useful if you want to offer time-cards, gift-cards, or some other external way of subscribing users or extending subscriptions, while keeping the billing handling within Stripe. Warning Subscription extensions are achieved by manipulating the trial_end of the subscription instance, which means that Stripe will change the status to trialing .","title":"Managing subscriptions and payment sources"},{"location":"usage/managing_subscriptions/#managing-subscriptions-and-payment-sources","text":"","title":"Managing subscriptions and payment sources"},{"location":"usage/managing_subscriptions/#extending-subscriptions","text":"For your convenience, dj-stripe provides a Subscription.extend(*delta*) method Subscriptions can be extended by using the Subscription.extend method, which takes a positive timedelta as its only property. This method is useful if you want to offer time-cards, gift-cards, or some other external way of subscribing users or extending subscriptions, while keeping the billing handling within Stripe. Warning Subscription extensions are achieved by manipulating the trial_end of the subscription instance, which means that Stripe will change the status to trialing .","title":"Extending subscriptions"},{"location":"usage/manually_syncing_with_stripe/","text":"Manually syncing data with Stripe If you're using dj-stripe's webhook handlers then data will be automatically synced from Stripe to the Django database, but in some circumstances you may want to manually sync Stripe API data as well. Command line You can sync your database with stripe using the manage command djstripe_sync_models , e.g. to populate an empty database from an existing Stripe account. ./manage.py djstripe_sync_models With no arguments this will sync all supported models, or a list of models to sync can be provided. ./manage.py djstripe_sync_models Invoice Subscription Note that this may be redundant since we recursively sync related objects. You can manually reprocess events using the management commands djstripe_process_events . By default this processes all events, but options can be passed to limit the events processed. Note the Stripe API documents a limitation where events are only guaranteed to be available for 30 days. # all events ./manage.py djstripe_process_events # failed events (events with pending webhooks or where all webhook delivery attempts failed) ./manage.py djstripe_process_events --failed # filter by event type (all payment_intent events in this example) ./manage.py djstripe_process_events --type payment_intent.* # specific events by ID ./manage.py djstripe_process_events --ids evt_foo evt_bar # more output for debugging processing failures ./manage.py djstripe_process_events -v 2 In Code To sync in code, for example if you write to the Stripe API and want to work with the resulting dj-stripe object without having to wait for the webhook trigger. This can be done using the classmethod sync_from_stripe_data that exists on all dj-stripe model classes. E.g. creating a product using the Stripe API, and then syncing the API return data to Django using dj-stripe:","title":"Manually syncing data with Stripe"},{"location":"usage/manually_syncing_with_stripe/#manually-syncing-data-with-stripe","text":"If you're using dj-stripe's webhook handlers then data will be automatically synced from Stripe to the Django database, but in some circumstances you may want to manually sync Stripe API data as well.","title":"Manually syncing data with Stripe"},{"location":"usage/manually_syncing_with_stripe/#command-line","text":"You can sync your database with stripe using the manage command djstripe_sync_models , e.g. to populate an empty database from an existing Stripe account. ./manage.py djstripe_sync_models With no arguments this will sync all supported models, or a list of models to sync can be provided. ./manage.py djstripe_sync_models Invoice Subscription Note that this may be redundant since we recursively sync related objects. You can manually reprocess events using the management commands djstripe_process_events . By default this processes all events, but options can be passed to limit the events processed. Note the Stripe API documents a limitation where events are only guaranteed to be available for 30 days. # all events ./manage.py djstripe_process_events # failed events (events with pending webhooks or where all webhook delivery attempts failed) ./manage.py djstripe_process_events --failed # filter by event type (all payment_intent events in this example) ./manage.py djstripe_process_events --type payment_intent.* # specific events by ID ./manage.py djstripe_process_events --ids evt_foo evt_bar # more output for debugging processing failures ./manage.py djstripe_process_events -v 2","title":"Command line"},{"location":"usage/manually_syncing_with_stripe/#in-code","text":"To sync in code, for example if you write to the Stripe API and want to work with the resulting dj-stripe object without having to wait for the webhook trigger. This can be done using the classmethod sync_from_stripe_data that exists on all dj-stripe model classes. E.g. creating a product using the Stripe API, and then syncing the API return data to Django using dj-stripe:","title":"In Code"},{"location":"usage/subscribing_customers/","text":"Subscribing a customer to one or more prices (or plans) For your convenience, dj-stripe provides a djstripe.models.Customer.subscribe method that will try to charge the customer immediately unless you specify charge_immediately=False Recommended Approach # Recommended Approach to use items dict with Prices ## This will subscribe <customer> to both <price_1> and <price_2> price_1 = Price . objects . get ( nickname = \"one_price\" ) price_2 = Price . objects . get ( nickname = \"two_price\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"price\" : price_1 }, { \"price\" : price_2 }]) ## This will subscribe <customer> to <price_1> price_1 = Price . objects . get ( nickname = \"one_price\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"price\" : price_1 }]) Alternate Approach 1 (with legacy Plans) ## (Alternate Approach) This will subscribe <customer> to <price_1> price_1 = Price . objects . get ( nickname = \"one_price\" ) customer = Customer . objects . first () customer . subscribe ( price = price_1 ) # If you still use legacy Plans... ## This will subscribe <customer> to both <plan_1> and <plan_2> plan_1 = Plan . objects . get ( nickname = \"one_plan\" ) plan_2 = Plan . objects . get ( nickname = \"two_plan\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"plan\" : plan_1 }, { \"plan\" : plan_2 }]) ## This will subscribe <customer> to <plan_1> plan_1 = Plan . objects . get ( nickname = \"one_plan\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"plan\" : plan_1 }]) Alternate Approach 2 ## (Alternate Approach) This will subscribe <customer> to <plan_1> plan_1 = Plan . objects . get ( nickname = \"one_plan\" ) customer = Customer . objects . first () customer . subscribe ( plan = plan_1 ) However in some cases subscribe() might not support all the arguments you need for your implementation. When this happens you can just call the official stripe.Customer.subscribe() . Tip Checkout this example and this . Note that PaymentMethods can be used instead of Cards/Source by substituting # Add the payment method customer's default customer . add_payment_method ( payment_method ) instead of # Add the source as the customer's default card customer . add_card ( stripe_source ) in the above example.","title":"Subscribing a customer to a plan"},{"location":"usage/subscribing_customers/#subscribing-a-customer-to-one-or-more-prices-or-plans","text":"For your convenience, dj-stripe provides a djstripe.models.Customer.subscribe method that will try to charge the customer immediately unless you specify charge_immediately=False","title":"Subscribing a customer to one or more prices (or plans)"},{"location":"usage/subscribing_customers/#recommended-approach","text":"# Recommended Approach to use items dict with Prices ## This will subscribe <customer> to both <price_1> and <price_2> price_1 = Price . objects . get ( nickname = \"one_price\" ) price_2 = Price . objects . get ( nickname = \"two_price\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"price\" : price_1 }, { \"price\" : price_2 }]) ## This will subscribe <customer> to <price_1> price_1 = Price . objects . get ( nickname = \"one_price\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"price\" : price_1 }])","title":"Recommended Approach"},{"location":"usage/subscribing_customers/#alternate-approach-1-with-legacy-plans","text":"## (Alternate Approach) This will subscribe <customer> to <price_1> price_1 = Price . objects . get ( nickname = \"one_price\" ) customer = Customer . objects . first () customer . subscribe ( price = price_1 ) # If you still use legacy Plans... ## This will subscribe <customer> to both <plan_1> and <plan_2> plan_1 = Plan . objects . get ( nickname = \"one_plan\" ) plan_2 = Plan . objects . get ( nickname = \"two_plan\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"plan\" : plan_1 }, { \"plan\" : plan_2 }]) ## This will subscribe <customer> to <plan_1> plan_1 = Plan . objects . get ( nickname = \"one_plan\" ) customer = Customer . objects . first () customer . subscribe ( items = [{ \"plan\" : plan_1 }])","title":"Alternate Approach 1 (with legacy Plans)"},{"location":"usage/subscribing_customers/#alternate-approach-2","text":"## (Alternate Approach) This will subscribe <customer> to <plan_1> plan_1 = Plan . objects . get ( nickname = \"one_plan\" ) customer = Customer . objects . first () customer . subscribe ( plan = plan_1 ) However in some cases subscribe() might not support all the arguments you need for your implementation. When this happens you can just call the official stripe.Customer.subscribe() . Tip Checkout this example and this . Note that PaymentMethods can be used instead of Cards/Source by substituting # Add the payment method customer's default customer . add_payment_method ( payment_method ) instead of # Add the source as the customer's default card customer . add_card ( stripe_source ) in the above example.","title":"Alternate Approach 2"},{"location":"usage/using_stripe_checkout/","text":"Create a Stripe Checkout Session For your convenience, dj-stripe has provided an example implementation on how to use Checkouts Please note that in order for dj-stripe to create a link between your customers and your subscribers , you need to add the DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY key to the metadata parameter of Checkout . This has also been demonstrated in the aforementioned example","title":"Using Stripe Checkout"},{"location":"usage/using_stripe_checkout/#create-a-stripe-checkout-session","text":"For your convenience, dj-stripe has provided an example implementation on how to use Checkouts Please note that in order for dj-stripe to create a link between your customers and your subscribers , you need to add the DJSTRIPE_SUBSCRIBER_CUSTOMER_KEY key to the metadata parameter of Checkout . This has also been demonstrated in the aforementioned example","title":"Create a Stripe Checkout Session"},{"location":"usage/using_with_docker/","text":"Using with Docker A Docker image allows you to run the Stripe CLI in a container. Here is a sample docker-compose.yaml file that sets up all the services to use Stripe CLI in a dockerised django container (with djstripe) version : \"3.9\" volumes : postgres-data : {} services : db : image : postgres:12 volumes : - postgres-data:/var/lib/postgresql/data environment : - POSTGRES_DB=random_number - POSTGRES_USER=root - POSTGRES_PASSWORD=random_number web : build : context : . dockerfile : <PATH_TO_DOCKERFILE> command : python manage.py runserver 0.0.0.0:8000 volumes : - .:/app ports : - \"8000:8000\" depends_on : - db environment : # Stripe specific keys - STRIPE_PUBLIC_KEY=pk_test_****** - STRIPE_SECRET_KEY=sk_test_****** - DJSTRIPE_TEST_WEBHOOK_SECRET=whsec_****** # Database Specific Settings - DJSTRIPE_TEST_DB_VENDOR=postgres - DJSTRIPE_TEST_DB_PORT=5432 - DJSTRIPE_TEST_DB_USER=root - DJSTRIPE_TEST_DB_NAME=random_number - DJSTRIPE_TEST_DB_PASS=random_number - DJSTRIPE_TEST_DB_HOST=db stripe : image : stripe/stripe-cli:v1.7.4 command : listen --forward-to http://web:8000/djstripe/webhook/ depends_on : - web environment : - STRIPE_API_KEY=sk_test_****** - STRIPE_DEVICE_NAME=djstripe_docker","title":"Using with Docker"},{"location":"usage/using_with_docker/#using-with-docker","text":"A Docker image allows you to run the Stripe CLI in a container. Here is a sample docker-compose.yaml file that sets up all the services to use Stripe CLI in a dockerised django container (with djstripe) version : \"3.9\" volumes : postgres-data : {} services : db : image : postgres:12 volumes : - postgres-data:/var/lib/postgresql/data environment : - POSTGRES_DB=random_number - POSTGRES_USER=root - POSTGRES_PASSWORD=random_number web : build : context : . dockerfile : <PATH_TO_DOCKERFILE> command : python manage.py runserver 0.0.0.0:8000 volumes : - .:/app ports : - \"8000:8000\" depends_on : - db environment : # Stripe specific keys - STRIPE_PUBLIC_KEY=pk_test_****** - STRIPE_SECRET_KEY=sk_test_****** - DJSTRIPE_TEST_WEBHOOK_SECRET=whsec_****** # Database Specific Settings - DJSTRIPE_TEST_DB_VENDOR=postgres - DJSTRIPE_TEST_DB_PORT=5432 - DJSTRIPE_TEST_DB_USER=root - DJSTRIPE_TEST_DB_NAME=random_number - DJSTRIPE_TEST_DB_PASS=random_number - DJSTRIPE_TEST_DB_HOST=db stripe : image : stripe/stripe-cli:v1.7.4 command : listen --forward-to http://web:8000/djstripe/webhook/ depends_on : - web environment : - STRIPE_API_KEY=sk_test_****** - STRIPE_DEVICE_NAME=djstripe_docker","title":"Using with Docker"},{"location":"usage/webhooks/","text":"Using Stripe Webhooks Available settings dj-stripe provides the following settings to tune how your webhooks work: DJSTRIPE_WEBHOOK_URL DJSTRIPE_WEBHOOK_SECRET DJSTRIPE_WEBHOOK_VALIDATION DJSTRIPE_WEBHOOK_TOLERANCE DJSTRIPE_WEBHOOK_EVENT_CALLBACK Using webhooks in dj-stripe dj-stripe comes with native support for webhooks as event listeners. Events allow you to do things like [sending an email to a customer when his payment has failed or trial period is ending. This is how you use them: from djstripe import webhooks @webhooks . handler ( \"customer.subscription.trial_will_end\" ) def my_handler ( event , ** kwargs ): print ( \"We should probably notify the user at this point\" ) You can handle all events related to customers like this: from djstripe import webhooks @webhooks . handler ( \"customer\" ) def my_handler ( event , ** kwargs ): print ( \"We should probably notify the user at this point\" ) You can also handle different events in the same handler: from djstripe import webhooks @webhooks . handler ( \"price\" , \"product\" ) def my_handler ( event , ** kwargs ): print ( \"Triggered webhook \" + event . type ) Warning In order to get registrations picked up, you need to put them in a module that is imported like models.py or make sure you import it manually. Webhook event creation and processing is now wrapped in a transaction.atomic() block to better handle webhook errors. This will prevent any additional database modifications you may perform in your custom handler from being committed should something in the webhook processing chain fail. You can also take advantage of Django's transaction.on_commit() function to only perform an action if the transaction successfully commits (meaning the Event processing worked): from django.db import transaction from djstripe import webhooks def do_something (): pass # send a mail, invalidate a cache, fire off a Celery task, etc. @webhooks . handler ( \"price\" , \"product\" ) def my_handler ( event , ** kwargs ): transaction . on_commit ( do_something ) Official documentation Stripe docs for types of Events: https://stripe.com/docs/api/events/types Stripe docs for Webhooks: https://stripe.com/docs/webhooks Django docs for transactions: https://docs.djangoproject.com/en/dev/topics/db/transactions/#performing-actions-after-commit","title":"Using Stripe Webhooks"},{"location":"usage/webhooks/#using-stripe-webhooks","text":"","title":"Using Stripe Webhooks"},{"location":"usage/webhooks/#available-settings","text":"dj-stripe provides the following settings to tune how your webhooks work: DJSTRIPE_WEBHOOK_URL DJSTRIPE_WEBHOOK_SECRET DJSTRIPE_WEBHOOK_VALIDATION DJSTRIPE_WEBHOOK_TOLERANCE DJSTRIPE_WEBHOOK_EVENT_CALLBACK","title":"Available settings"},{"location":"usage/webhooks/#using-webhooks-in-dj-stripe","text":"dj-stripe comes with native support for webhooks as event listeners. Events allow you to do things like [sending an email to a customer when his payment has failed or trial period is ending. This is how you use them: from djstripe import webhooks @webhooks . handler ( \"customer.subscription.trial_will_end\" ) def my_handler ( event , ** kwargs ): print ( \"We should probably notify the user at this point\" ) You can handle all events related to customers like this: from djstripe import webhooks @webhooks . handler ( \"customer\" ) def my_handler ( event , ** kwargs ): print ( \"We should probably notify the user at this point\" ) You can also handle different events in the same handler: from djstripe import webhooks @webhooks . handler ( \"price\" , \"product\" ) def my_handler ( event , ** kwargs ): print ( \"Triggered webhook \" + event . type ) Warning In order to get registrations picked up, you need to put them in a module that is imported like models.py or make sure you import it manually. Webhook event creation and processing is now wrapped in a transaction.atomic() block to better handle webhook errors. This will prevent any additional database modifications you may perform in your custom handler from being committed should something in the webhook processing chain fail. You can also take advantage of Django's transaction.on_commit() function to only perform an action if the transaction successfully commits (meaning the Event processing worked): from django.db import transaction from djstripe import webhooks def do_something (): pass # send a mail, invalidate a cache, fire off a Celery task, etc. @webhooks . handler ( \"price\" , \"product\" ) def my_handler ( event , ** kwargs ): transaction . on_commit ( do_something )","title":"Using webhooks in dj-stripe"},{"location":"usage/webhooks/#official-documentation","text":"Stripe docs for types of Events: https://stripe.com/docs/api/events/types Stripe docs for Webhooks: https://stripe.com/docs/webhooks Django docs for transactions: https://docs.djangoproject.com/en/dev/topics/db/transactions/#performing-actions-after-commit","title":"Official documentation"}]}